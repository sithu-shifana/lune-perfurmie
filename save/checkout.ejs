<%- include('../partials/user/header') %>

<!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
/* Checkout Page CSS - Consistent with Cart Page Theme */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background-color: #f8f8f8;
  color: #2c2c2c;
  line-height: 1.6;
  font-weight: 300;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 15px;
}

/* Page title */
h2.mb-4 {
  font-weight: 200;
  font-size: 2.5rem;
  color: #1a1a1a;
  text-align: center;
  margin: 2rem 0 3rem;
  letter-spacing: 1px;
  text-transform: uppercase;
}

/* Loading overlay */
#loadingOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

#loadingOverlay.show {
  opacity: 1;
  visibility: visible;
}

.spinner-border {
  width: 3rem;
  height: 3rem;
  color: #6c757d;
}

/* Order items layout */
#orderItems {
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-bottom: 2rem;
}

/* Order item card styling - Horizontal layout like cart */
.order-item {
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 10px;
  padding: 20px;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 20px;
  position: relative;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  width: 100%;
}

.order-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

/* Product image */
.order-item img {
  width: 150px;
  height: 150px;
  object-fit: cover;
  border-radius: 8px;
  flex-shrink: 0;
}

/* Product details container */
.order-item-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding-right: 50px;
  min-width: 0;
}

/* Product details */
.order-item h5 {
  font-size: 1.2rem;
  font-weight: 400;
  color: #1a1a1a;
  margin: 0;
  line-height: 1.4;
}

.price-display {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.current-price {
  font-size: 1.1rem;
  font-weight: 600;
  color: #1a1a1a;
}

.original-price {
  font-size: 0.9rem;
  color: #5b5454;
  text-decoration: line-through;
}

.savings-amount {
  font-size: 0.85rem;
  color: #28a745;
  font-weight: 500;
}

/* Quantity display */
.quantity-section {
  display: flex;
  align-items: center;
  gap: 10px;
}

.quantity-display {
  font-size: 0.95rem;
  color: #323030;
}

/* Item total */
.item-total-section {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.item-total {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1a1a1a;
}

.item-savings {
  font-size: 0.85rem;
  color: #28a745;
  font-weight: 500;
}

/* Empty cart */
#orderItems p {
  width: 100%;
  text-align: center;
  font-size: 1.25rem;
  color: #666;
  margin: 3rem 0;
}

/* Address Section Styling */
.address-section {
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 12px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
}

.address-section label {
  display: block;
  color: #1a1a1a;
  font-size: 1.1rem;
  font-weight: 400;
  margin-bottom: 1rem;
  letter-spacing: 0.5px;
}

/* Address Dropdown Styling */
.address-dropdown-container {
  position: relative;
  margin-bottom: 1rem;
}

#addressDropdownBtn {
  width: 100%;
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 8px;
  padding: 15px 20px;
  text-align: left;
  font-size: 1rem;
  color: #2c2c2c;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  position: relative;
}

#addressDropdownBtn:hover {
  border-color: #d0d0d0;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#addressDropdownBtn:focus {
  outline: none;
  border-color: #431c08;
  box-shadow: 0 0 0 3px rgba(13, 202, 240, 0.1);
}

.dropdown-arrow {
  position: absolute;
  right: 15px;
  top: 50%;
  transform: translateY(-50%);
  color: #666;
  font-size: 0.9rem;
  transition: transform 0.3s ease;
}

#addressDropdownBtn.active .dropdown-arrow {
  transform: translateY(-50%) rotate(180deg);
}

#addressDropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 8px;
  margin-top: 5px;
  max-height: 250px;
  overflow-y: auto;
  z-index: 1000;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: all 0.3s ease;
}

#addressDropdown.show {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

#addressDropdown li {
  padding: 15px 20px;
  cursor: pointer;
  border-bottom: 1px solid #f5f5f5;
  transition: background-color 0.3s ease;
}

#addressDropdown li:last-child {
  border-bottom: none;
}

#addressDropdown li:hover {
  background-color: #f8f9fa;
}

#addressDropdown li strong {
  color: #1a1a1a;
  font-weight: 500;
}

#addressDropdown li .address-details {
  color: #666;
  font-size: 0.9rem;
  margin-top: 3px;
}

#addressDropdown li .default-badge {
  color: #28a745;
  font-size: 0.8rem;
  font-weight: 500;
  background: #e8f5e8;
  padding: 2px 8px;
  border-radius: 4px;
  margin-left: 8px;
}

/* Add New Address Button */
.add-address-btn {
  background: none;
  border: none;
  color: #f0860d;
  font-size: 0.95rem;
  cursor: pointer;
  padding: 0;
  margin-top: 10px;
  transition: color 0.3s ease;
}

.add-address-btn:hover {
  color: #0aa8c5;
  text-decoration: underline;
}

/* Add Address Modal */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.modal-overlay.show {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background: #ffffff;
  border-radius: 12px;
  padding: 2rem;
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.modal-overlay.show .modal-content {
  transform: scale(1);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.modal-title {
  font-size: 1.4rem;
  font-weight: 400;
  color: #1a1a1a;
  margin: 0;
}

.modal-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #666;
  cursor: pointer;
  padding: 0;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: color 0.3s ease;
}

.modal-close:hover {
  color: #333;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  color: #1a1a1a;
  font-size: 0.95rem;
  font-weight: 400;
  margin-bottom: 0.5rem;
}

.form-group input {
  width: 100%;
  padding: 12px 15px;
  border: 1px solid #e8e8e8;
  border-radius: 6px;
  font-size: 0.95rem;
  color: #2c2c2c;
  transition: border-color 0.3s ease;
}

.form-group input:focus {
  outline: none;
  border-color: #0dcaf0;
}

/* Error text styling */
.error-text {
  color: #dc3545;
  font-size: 12px;
  margin-top: 4px;
  min-height: 16px;
}

.form-actions {
  display: flex;
  gap: 15px;
  justify-content: flex-end;
  margin-top: 2rem;
}

.form-actions button {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-cancel {
  background: #f8f9fa;
  color: #666;
}

.btn-cancel:hover {
  background: #e9ecef;
}

.btn-save {
  background: #0dcaf0;
  color: #ffffff;
}

.btn-save:hover {
  background: #0aa8c5;
}

/* Order summary */
.order-summary {
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
  margin-top: 2rem;
}

.order-summary h4 {
  font-weight: 300;
  font-size: 1.8rem;
  color: #1a1a1a;
  text-align: center;
  margin-bottom: 1.5rem;
}

.order-summary .d-flex {
  justify-content: space-between;
  margin-bottom: 0.8rem;
  font-size: 1rem;
}

.order-summary .d-flex span:first-child {
  color: #666;
  font-weight: 300;
}

.order-summary .d-flex span:last-child {
  color: #1a1a1a;
  font-weight: 500;
}

.savings-highlight {
  background: #e8f5e8;
  padding: 0.8rem;
  border-radius: 6px;
  margin: 1rem 0;
  border-left: 4px solid #28a745;
}

.savings-highlight span:last-child {
  color: #28a745;
  font-weight: 600;
}

.order-summary hr {
  margin: 1.5rem 0;
  border-color: #e8e8e8;
}

.order-summary .fs-5.fw-bold {
  font-size: 1.4rem;
}

/* Buttons */
.btn {
  border-radius: 6px;
  font-weight: 400;
  padding: 12px 24px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.btn-primary {
  background: #0dcaf0;
  color: #ffffff;
  border: none;
}

.btn-primary:hover {
  background: #0aa8c5;
}

/* Hidden utility class */
.hidden {
  display: none !important;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .order-item {
    padding: 15px;
    gap: 15px;
  }
  
  .order-item img {
    width: 120px;
    height: 120px;
  }
  
  .order-item-content {
    padding-right: 40px;
  }
  
  .order-item h5 {
    font-size: 1.1rem;
  }
  
  .current-price {
    font-size: 1rem;
  }
  
  .item-total {
    font-size: 1.1rem;
  }
  
  h2.mb-4 {
    font-size: 2rem;
    margin-bottom: 2rem;
  }
  
  .order-summary, .address-section {
    padding: 1.5rem;
  }
  
  .modal-content {
    padding: 1.5rem;
  }
}

@media (max-width: 576px) {
  .container {
    padding: 0 10px;
  }
  
  .order-item {
    padding: 12px;
    gap: 12px;
  }
  
  .order-item img {
    width: 100px;
    height: 100px;
  }
  
  .order-item-content {
    padding-right: 35px;
  }
  
  .order-item h5 {
    font-size: 1rem;
  }
  
  .current-price {
    font-size: 0.95rem;
  }
  
  .item-total {
    font-size: 1rem;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  .form-actions button {
    width: 100%;
  }
}
</style>

<!-- Loading Overlay -->
<div id="loadingOverlay">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

<div class="container my-4">
  <h2 class="mb-4">Checkout</h2>

  <!-- Order Items List -->
  <div id="orderItems">
    <% if (orderItems && orderItems.length > 0) { %>
      <% orderItems.forEach(item => { %>
        <div class="order-item" data-item-id="<%= item._id %>">
          <a href="/product-show/<%= item.productId %>">
            <img src="<%= item.image %>" class="img-fluid rounded" alt="<%= item.productName %>">
          </a>
          <div class="order-item-content">
            <h5><%= item.productName %> (<%= item.size %>)</h5>
            <div class="price-display">
              <div class="current-price">₹<%= item.offerPrice.toLocaleString() %> each</div>
              <% if (item.hasOffer) { %>
                <div class="original-price">₹<%= item.originalPrice.toLocaleString() %></div>
              <% } %>
            </div>
            <div class="quantity-section">
              <span class="quantity-display">Qty: <%= item.quantity %></span>
            </div>
            <div class="item-total-section">
              <strong class="item-total">₹<%= item.totalOffer.toLocaleString() %></strong>
            </div>
            <% if (item.hasOffer) { %>
              <div class="savings-amount">You Saved ₹<%= item.Saving.toLocaleString() %></div>
            <% } %>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <p>No items in your order.</p>
    <% } %>
  </div>

  <!-- Address Selection Section -->
  <div class="address-section">
    <label>Select Delivery Address</label>
    <div class="address-dropdown-container">
      <button id="addressDropdownBtn" type="button">
        <span id="selectedAddress">
          <% if (selectedAddressId) { 
               const selected = addresses.find(addr => addr._id.toString() === selectedAddressId.toString());
          %>
            <%= selected.name %>, <%= selected.city %>
          <% } else { %>
            Choose your delivery address
          <% } %>
        </span>
        <span class="dropdown-arrow">▼</span>
      </button>

      <ul id="addressDropdown" class="hidden">
        <% if (addresses && addresses.length > 0) { %>
          <% addresses.forEach(address => { 
               const isSelected = address._id.toString() === selectedAddressId?.toString();
          %>
            <li 
              data-id="<%= address._id %>" 
              class="<%= isSelected ? 'selected' : '' %>">
              <strong><%= address.name %></strong>
              <div class="address-details">
                <%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.pinCode %>
              </div>
              <% if(address.isDefault) { %>
                <span class="default-badge">Default</span>
              <% } %>
            </li>
          <% }) %>
        <% } else { %>
          <li style="color: #666; text-align: center;">No addresses found</li>
        <% } %>
      </ul>
    </div>

    <button class="add-address-btn" type="button" onclick="openAddAddressModal()">
      + Add New Address
    </button>
  </div>

  <!-- Add Address Modal -->
  <div id="addAddressModal" class="modal-overlay hidden">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Add New Address</h3>
        <button class="modal-close" type="button" onclick="closeAddAddressModal()">×</button>
      </div>
      <form id="addAddressForm">
        <div class="form-group">
          <label for="addressName">Full Name</label>
          <input type="text" id="addressName" name="name" placeholder="Full Name" class="form-input">
          <p class="error-text" id="name-error"></p>
        </div>
        <div class="form-group">
          <label for="addressPhone">Phone Number</label>
          <input type="tel" id="addressPhone" name="phone" placeholder="Phone Number" class="form-input">
          <p class="error-text" id="phone-error"></p>
        </div>
        <div class="form-group">
          <label for="addressStreet">Street Address</label>
          <input type="text" id="addressStreet" name="street" placeholder="Street Address" class="form-input">
          <p class="error-text" id="street-error"></p>
        </div>
        <div class="form-group">
          <label for="addressCity">City</label>
          <input type="text" id="addressCity" name="city" placeholder="City" class="form-input">
          <p class="error-text" id="city-error"></p>
        </div>
        <div class="form-group">
          <label for="addressState">State</label>
          <input type="text" id="addressState" name="state" placeholder="State" class="form-input">
          <p class="error-text" id="state-error"></p>
        </div>
        <div class="form-group">
          <label for="addressPinCode">Pin Code</label>
          <input type="text" id="addressPinCode" name="pinCode" placeholder="Pin Code" class="form-input">
          <p class="error-text" id="pinCode-error"></p>
        </div>
        <div class="form-group">
          <label for="addressCountry">Country</label>
          <input type="text" id="addressCountry" name="country" placeholder="Country" value="India" class="form-input">
          <p class="error-text" id="country-error"></p>
        </div>
        <div class="form-actions">
          <button type="button" class="btn-cancel" onclick="closeAddAddressModal()">Cancel</button>
          <button type="submit" class="btn-save">Save Address</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Hidden input for selected address -->
  <input type="hidden" id="selectedAddressId" value="<%= selectedAddressId %>">

  <!-- Order Summary -->
  <% if (orderItems && orderItems.length > 0) { %>
    <div class="order-summary">
      <h4>Order Summary</h4>
      <div class="d-flex justify-content-between">
        <span>Total:</span>
        <span id="total">₹<%= total.toLocaleString() %></span>
      </div>
      <div class="d-flex justify-content-between">
        <span>Subtotal:</span>
        <span id="subtotal">₹<%= subtotal.toLocaleString() %></span>
      </div>
      <% if (totalSavings > 0) { %>
        <div class="savings-highlight">
          <div class="d-flex justify-content-between">
            <span>🎉 Your Total Savings:</span>
            <span id="totalSavings">-₹<%= totalSavings.toLocaleString() %></span>
          </div>
        </div>
      <% } %>
      <hr>
      <div class="d-flex justify-content-between fs-5 fw-bold">
        <span>Final Total:</span>
        <span id="total">₹<%= subtotal.toLocaleString() %></span>
      </div>
      <div class="mt-3">
        <button class="btn btn-primary w-100" onclick="placeOrder()">Place Order</button>
      </div>
    </div>
  <% } %>
</div>

<!-- Bootstrap 5 JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  // Utility functions
  const showLoading = () => {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.classList.add('show');
  };

  const hideLoading = () => {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.classList.remove('show');
  };

  // SweetAlert2 message function - consistent with address book
  function showMessage(title, text, icon = 'success') {
    Swal.fire({
      title: title,
      text: text,
      icon: icon,
      confirmButtonText: 'OK',
      timer: 4000,
      timerProgressBar: true,
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      didOpen: () => {
        Swal.getPopup().style.padding = '12px 20px';
        Swal.getPopup().style.fontSize = '14px';
        Swal.getPopup().style.minWidth = '250px';
        Swal.getPopup().style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
        Swal.getPopup().style.borderRadius = '6px';
      }
    });
  }

  // Address dropdown functionality
  const dropdownBtn = document.getElementById('addressDropdownBtn');
  const dropdown = document.getElementById('addressDropdown');
  const selectedAddressSpan = document.getElementById('selectedAddress');
  const selectedAddressIdInput = document.getElementById('selectedAddressId');

  dropdownBtn.addEventListener('click', (e) => {
    e.preventDefault();
    dropdown.classList.toggle('hidden');
    dropdown.classList.toggle('show');
    dropdownBtn.classList.toggle('active');
  });

  dropdown.querySelectorAll('li').forEach(item => {
    item.addEventListener('click', (e) => {
      e.preventDefault();
      const addressId = item.dataset.id;
      if (addressId) {
        const addressText = item.querySelector('strong').textContent;
        const addressDetails = item.querySelector('.address-details').textContent;
        selectedAddressSpan.textContent = `${addressText} - ${addressDetails}`;
        selectedAddressIdInput.value = addressId;
      }
      dropdown.classList.add('hidden');
      dropdown.classList.remove('show');
      dropdownBtn.classList.remove('active');
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!dropdown.contains(e.target) && !dropdownBtn.contains(e.target)) {
      dropdown.classList.add('hidden');
      dropdown.classList.remove('show');
      dropdownBtn.classList.remove('active');
    }
  });

  // Add address modal functionality
  function openAddAddressModal() {
    const modal = document.getElementById('addAddressModal');
    modal.classList.remove('hidden');
    setTimeout(() => modal.classList.add('show'), 10);
    
    // Clear form and errors
    document.getElementById('addAddressForm').reset();
    const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
    errorFields.forEach((field) => {
      document.getElementById(`${field}-error`).textContent = '';
    });
  }

  function closeAddAddressModal() {
    const modal = document.getElementById('addAddressModal');
    modal.classList.remove('show');
    setTimeout(() => modal.classList.add('hidden'), 300);
    document.getElementById('addAddressForm').reset();
  }

  // Handle add address form submission - Rely on backend validation
  document.getElementById('addAddressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Clear previous errors
    const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
    errorFields.forEach((field) => {
      document.getElementById(`${field}-error`).textContent = '';
    });
    
    const formData = new FormData(e.target);
    const addressData = Object.fromEntries(formData);
    
    showLoading();
    
    try {
      console.log('Submitting new address:', addressData);
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
      const response = await fetch('/address-add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(addressData)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        closeAddAddressModal();
        showMessage('Success', 'Address added successfully!', 'success');
        // Refresh the page to show the new address as selected
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        // Handle validation errors from backend
        if (result.errors) {
          console.log('Validation errors:', result.errors);
          for (let field in result.errors) {
            const errorEl = document.getElementById(`${field}-error`);
            if (errorEl) errorEl.textContent = result.errors[field];
          }
        } else {
          showMessage('Error', result.message || 'Failed to add address.', 'error');
        }
      }
    } catch (error) {
      console.error('Add address fetch error:', error);
      showMessage('Error', 'Unable to connect to the server.', 'error');
    } finally {
      hideLoading();
    }
  });

  // Place order functionality
  async function placeOrder() {
    const selectedAddress = selectedAddressIdInput.value;
    
    if (!selectedAddress) {
      showMessage('Address Required', 'Please select a delivery address to continue.', 'warning');
      return;
    }
    
    // Confirm order placement
    const confirmResult = await Swal.fire({
      title: 'Confirm Your Order',
      text: 'Are you sure you want to place this order?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, Place Order',
      cancelButtonText: 'Cancel',
      confirmButtonColor: '#0dcaf0',
      cancelButtonColor: '#6c757d'
    });
    
    if (!confirmResult.isConfirmed) {
      return;
    }
    
    showLoading();
    
    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
      const response = await fetch('/place-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          addressId: selectedAddress
        })
      });
      
      const result = await response.json();
      
      if (response.ok) {
        showMessage('Order Placed Successfully!', 'Your order has been placed successfully. You will receive a confirmation email shortly.', 'success');
        
        // Redirect to order confirmation or orders page after a delay
        setTimeout(() => {
          if (result.orderId) {
            window.location.href = `/order-confirmation/${result.orderId}`;
          } else {
            window.location.href = '/orders';
          }
        }, 2000);
      } else {
        if (result.errors) {
          // Handle validation errors if any
          console.log('Order placement errors:', result.errors);
          showMessage('Validation Error', 'Please check your order details and try again.', 'error');
        } else {
          showMessage('Order Failed', result.message || 'Failed to place order. Please try again.', 'error');
        }
      }
    } catch (error) {
      console.error('Place order fetch error:', error);
      showMessage('Connection Error', 'Unable to connect to the server. Please check your internet connection and try again.', 'error');
    } finally {
      hideLoading();
    }
  }

  // Initialize dropdown on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Set default or selected address if available
    const defaultAddress = dropdown.querySelector('li .default-badge');
    if (selectedAddressIdInput.value) {
      const selectedAddressLi = dropdown.querySelector(`li[data-id="${selectedAddressIdInput.value}"]`);
      if (selectedAddressLi) {
        const addressText = selectedAddressLi.querySelector('strong').textContent;
        const addressDetails = selectedAddressLi.querySelector('.address-details').textContent;
        selectedAddressSpan.textContent = `${addressText} - ${addressDetails}`;
      }
    } else if (defaultAddress) {
      const defaultAddressLi = defaultAddress.closest('li');
      if (defaultAddressLi) {
        const addressId = defaultAddressLi.dataset.id;
        const addressText = defaultAddressLi.querySelector('strong').textContent;
        const addressDetails = defaultAddressLi.querySelector('.address-details').textContent;
        selectedAddressSpan.textContent = `${addressText} - ${addressDetails}`;
        selectedAddressIdInput.value = addressId;
      }
    }
  });

  // Handle escape key for modal
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const modal = document.getElementById('addAddressModal');
      if (modal && !modal.classList.contains('hidden')) {
        closeAddAddressModal();
      }
    }
  });
</script>