<%- include('../partials/admin/header') %>
<main class="dashboard-content">
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <style>
      .form-container { max-width: 800px; margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
      .form-group { margin-bottom: 20px; }
      .form-group label { display: block; font-weight: 500; margin-bottom: 8px; color: #333; }
      .form-group input, .form-group select, .form-group textarea { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
      .form-group select[multiple] { height: 150px; }
      .form-group textarea { resize: vertical; min-height: 100px; }
      .btn-primary { background-color: #4a6a4d; border: none; color: white; padding: 12px 20px; border-radius: 4px; cursor: pointer; }
      .btn-primary:hover:not(.loading) { background-color: #3a5a3d; }
      .btn-primary.loading { background-color: #6c757d; opacity: 0.6; }
      .error-message { color: #dc3545; font-size: 12px; margin-top: 5px; display: none; }
      .error-message.show { display: block; }
      .form-group.error input, .form-group.error select, .form-group.error textarea { border-color: #dc3545; }
      #topError { color: #dc3545; font-size: 14px; margin-bottom: 15px; padding: 10px; background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; display: none; }
      #topError.show { display: block; }
      #product-selection, #category-selection, #brand-selection { display: none; margin-top: 15px; }
      .loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: none; justify-content: center; align-items: center; z-index: 9999; }
      .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #4a6a4d; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; }
      @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
  </head>
  <body>
    <div class="loading-overlay" id="loadingOverlay">
      <div class="spinner"></div>
    </div>
    <section class="content-main">
      <div class="content-header">
        <h2 class="content-body">Add New Offer</h2>
      </div>
      <div class="form-container">
        <div id="topError" class="error-message"></div>
        <form id="offerForm">
          <div class="form-group">
            <label for="offerType">Offer Type <span style="color: red;">*</span></label>
            <select name="offerType" id="offerType">
              <option value="">Select Type</option>
              <option value="product">Product</option>
              <option value="category">Category</option>
              <option value="brand">Brand</option>
            </select>
            <div id="offerTypeError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="title">Title <span style="color: red;">*</span></label>
            <input type="text" name="title" id="title">
            <div id="titleError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="description">Description</label>
            <textarea name="description" id="description"></textarea>
            <div id="descriptionError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="discountType">Discount Type <span style="color: red;">*</span></label>
            <select name="discountType" id="discountType">
              <option value="">Select Discount Type</option>
              <option value="percentage">Percentage</option>
              <option value="flat">Flat Amount</option>
            </select>
            <div id="discountTypeError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="discountValue">Discount Value <span style="color: red;">*</span></label>
            <input type="number" name="discountValue" id="discountValue" min="0.01" step="0.01">
            <div id="discountValueError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="startDate">Start Date <span style="color: red;">*</span></label>
            <input type="date" name="startDate" id="startDate">
            <div id="startDateError" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="endDate">Expiry Date <span style="color: red;">*</span></label>
            <input type="date" name="endDate" id="endDate">
            <div id="endDateError" class="error-message"></div>
          </div>
          <div class="form-group" id="product-selection">
            <label for="product">Select Product <span style="color: red;">*</span></label>
            <select name="product" id="product">
              <option value="">Select Product</option>
              <% products.forEach(product => { %>
                <option value="<%= product._id %>">
                  <%= product.productName %> - <%= product.brand?.name || 'No Brand' %>
                </option>
              <% }) %>
            </select>
            <div id="productError" class="error-message"></div>
          </div>
          <div class="form-group" id="category-selection" style="display: none;">
            <label for="category">Select Category <span style="color: red;">*</span></label>
            <select name="category" id="category">
              <option value="">Select Category</option>
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% }) %>
            </select>
            <small style="color: #666;">This offer will apply to ALL products in the selected category</small>
            <div id="categoryError" class="error-message"></div>
          </div>
          <div class="form-group" id="brand-selection" style="display: none;">
            <label for="brand">Select Brand <span style="color: red;">*</span></label>
            <select name="brand" id="brand">
              <option value="">Select Brand</option>
              <% brands.forEach(brand => { %>
                <option value="<%= brand._id %>"><%= brand.name %></option>
              <% }) %>
            </select>
            <small style="color: #666;">This offer will apply to ALL products of the selected brand</small>
            <div id="brandError" class="error-message"></div>
          </div>
          <button type="submit" class="btn btn-primary" id="submitBtn">
            <span id="submitText">Add Offer</span>
            <span id="submitLoading" style="display: none;">Adding...</span>
          </button>
        </form>
      </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('offerForm');
        const submitBtn = document.getElementById('submitBtn');
        const submitText = document.getElementById('submitText');
        const submitLoading = document.getElementById('submitLoading');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const topError = document.getElementById('topError');

        function clearErrors() {
          document.querySelectorAll('.error-message').forEach(el => {
            el.classList.remove('show');
            el.textContent = '';
          });
          document.querySelectorAll('.form-group').forEach(el => el.classList.remove('error'));
          topError.classList.remove('show');
        }

        function showError(fieldId, message) {
          const errorElement = document.getElementById(`${fieldId}Error`);
          const formGroup = errorElement?.closest('.form-group');
          if (errorElement) {
            errorElement.textContent = message || 'Invalid input';
            errorElement.classList.add('show');
            if (formGroup) formGroup.classList.add('error');
          } else {
            topError.textContent = message || 'Unexpected error';
            topError.classList.add('show');
          }
          topError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        function showTopError(message) {
          topError.textContent = message || 'Unexpected error';
          topError.classList.add('show');
          topError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        // Handle offer type change
        document.getElementById('offerType').addEventListener('change', function() {
          const type = this.value;
          document.getElementById('product-selection').style.display = type === 'product' ? 'block' : 'none';
          document.getElementById('category-selection').style.display = type === 'category' ? 'block' : 'none';
          document.getElementById('brand-selection').style.display = type === 'brand' ? 'block' : 'none';
        });

        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').min = today;
        document.getElementById('startDate').addEventListener('change', function() {
          document.getElementById('endDate').min = this.value;
        });

        // Client-side validation
        function validateForm() {
          clearErrors();
          let isValid = true;

          const offerType = document.getElementById('offerType').value;
          if (!offerType) {
            showError('offerType', 'Please select an offer type');
            isValid = false;
          }

          const title = document.getElementById('title').value.trim();
          if (!title) {
            showError('title', 'Title is required');
            isValid = false;
          }

          const discountType = document.getElementById('discountType').value;
          if (!discountType) {
            showError('discountType', 'Please select a discount type');
            isValid = false;
          }

          const discountValue = parseFloat(document.getElementById('discountValue').value);
          if (!discountValue || discountValue < 0.01) {
            showError('discountValue', 'Discount value must be at least 0.01');
            isValid = false;
          }

          const startDate = document.getElementById('startDate').value;
          if (!startDate) {
            showError('startDate', 'Start date is required');
            isValid = false;
          }

          const endDate = document.getElementById('endDate').value;
          if (!endDate) {
            showError('endDate', 'Expiry date is required');
            isValid = false;
          } else if (startDate && new Date(endDate) < new Date(startDate)) {
            showError('endDate', 'Expiry date must be after start date');
            isValid = false;
          }

          if (offerType === 'product') {
            const product = document.getElementById('product').value;
            if (!product) {
              showError('product', 'Please select a product');
              isValid = false;
            }
          } else if (offerType === 'category') {
            const category = document.getElementById('category').value;
            if (!category) {
              showError('category', 'Please select a category');
              isValid = false;
            }
          } else if (offerType === 'brand') {
            const brand = document.getElementById('brand').value;
            if (!brand) {
              showError('brand', 'Please select a brand');
              isValid = false;
            }
          }

          return isValid;
        }

        // Form submission
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          if (!validateForm()) return;

          submitBtn.classList.add('loading');
          submitText.style.display = 'none';
          submitLoading.style.display = 'inline';
          loadingOverlay.style.display = 'flex';

          try {
            const formData = new FormData(form);
            const payload = Object.fromEntries(formData.entries());
            const offerType = payload.offerType;

            // Handle offer type-specific fields
            if (offerType === 'product') {
              if (!payload.product) throw new Error('Please select a product');
              delete payload.category;
              delete payload.brand;
            } else if (offerType === 'category') {
              if (!payload.category) throw new Error('Please select a category');
              delete payload.product;
              delete payload.brand;
            } else if (offerType === 'brand') {
              if (!payload.brand) throw new Error('Please select a brand');
              delete payload.product;
              delete payload.category;
            }
            delete payload.offerType; // Not in schema

            const response = await fetch('/admin/offer-add', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            const contentType = response.headers.get("content-type");
            if (!contentType || !contentType.includes("application/json")) {
              throw new Error("Invalid server response");
            }

            const data = await response.json();

            if (response.ok) {
              await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message || 'Offer added successfully!',
                timer: 2000,
                showConfirmButton: false
              });
              form.reset();
              window.location.href = '/admin/offerManagement';
            } else {
              if (data.errorType === "top") {
                showTopError(data.error);
              } else if (data.errorType === "title") {
                showError('title', data.error || 'Please enter a valid title');
              } else if (data.errorType === "discountType") {
                showError('discountType', data.error || 'Please select a valid discount type');
              } else if (data.errorType === "discountValue") {
                showError('discountValue', data.error || 'Please enter a valid discount value');
              } else if (data.errorType === "startDate") {
                showError('startDate', data.error || 'Please select a valid start date');
              } else if (data.errorType === "endDate") {
                showError('endDate', data.error || 'Please select a valid expiry date');
              } else if (data.errorType === "product") {
                showError('product', data.error || 'Please select a valid product');
              } else if (data.errorType === "category") {
                showError('category', data.error || 'Please select a valid category');
              } else if (data.errorType === "brand") {
                showError('brand', data.error || 'Please select a valid brand');
              } else {
                showTopError(data.error || 'Unexpected error occurred');
              }
            }
          } catch (error) {
            console.error('Submission error:', error);
            let errorMessage = 'Submission failed: Network error occurred';
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
              errorMessage = 'Submission failed: Unable to connect to the server. Please check your internet connection.';
            } else if (error.name === 'AbortError') {
              errorMessage = 'Submission failed: Request timed out. Please try again.';
            } else if (error.message === 'Invalid server response') {
              errorMessage = 'Submission failed: Server returned an invalid response. Please try again.';
            } else if (error.message.includes('Please select')) {
              showError(error.message.includes('category') ? 'category' : error.message.includes('product') ? 'product' : 'brand', error.message);
              return;
            }
            showTopError(errorMessage);
          } finally {
            submitBtn.classList.remove('loading');
            submitText.style.display = 'inline';
            submitLoading.style.display = 'none';
            loadingOverlay.style.display = 'none';
          }
        });

        // Initialize form state
        document.getElementById('offerType').dispatchEvent(new Event('change'));
      });
    </script>
  </body>
</main>