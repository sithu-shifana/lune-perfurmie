<%- include('../partials/admin/header') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
/* General body styling */
.btn {
  padding: 10px 24px;
  font-size: 1rem;
  border-radius: 8px;
  min-width: 100px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  border: none;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-primary:hover {
  background-color: #0056b3;
}

.btn-secondary {
  background-color: #e2e6ea;
  color: #333;
}

.btn-secondary:hover {
  background-color: #cfd4d9;
}

.btn-info {
  background-color: #17a2b8;
  color: white;
}

.btn-info:hover {
  background-color: #138496;
}

.btn-track {
  background-color: #378943;
  color: white;
}

.btn-track:hover {
  background-color: #77a94a;
}

.btn-warning {
  background-color: #ffc107;
  color: #212529;
}

.btn-warning:hover {
  background-color: #e0a800;
}

.btn-danger {
  background-color: #dc3545;
  color: white;
}

.btn-danger:hover {
  background-color: #c82333;
}

/* Table styling */
.table.table-striped {
  width: 100%;
  background: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.table th {
  background-color: #007bff;
  color: white;
  font-weight: 500;
  padding: 12px;
  text-align: left;
}

.table td {
  padding: 12px;
  vertical-align: middle;
}

.table tbody tr:hover {
  background-color: #f8f9fa;
}

/* Badges */
.badge {
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
  display: inline-block;
  min-width: 80px;
  text-align: center;
}

.alert-success {
  background-color: #28a745;
  color: white;
}

.alert-warning {
  background-color: #ffc107;
  color: #212529;
}

.alert-danger {
  background-color: #dc3545;
  color: white;
}

.status-return-requested {
  background-color: #fd7e14;
  color: white;
}

.status-cancelled {
  background-color: #dc3545;
  color: white;
}

.status-returned {
  background-color: #6c757d;
  color: white;
}

/* Product image */
img.product-image {
  width: 40px;
  height: 40px;
  object-fit: cover;
  border-radius: 4px;
  margin-right: 10px;
  vertical-align: middle;
}

/* Fade-in animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Stack buttons vertically for all screen sizes */
.modal-buttons {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
  justify-content: center;
  padding: 10px 0;
}

.modal-buttons .btn {
  text-decoration: none;
  width: 50%;
  max-height: 40px;
  text-align: center;
  padding: 10px 24px;
  font-size: .7rem;
  border-radius: 8px;
}

/* Filter form styling */
.filter-form-container {
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  padding: 16px;
  margin-bottom: 24px;
  display: flex;
  align-items: flex-end; /* Align items at the bottom for consistent button alignment */
  gap: 8px; /* Reduced space between form elements */
  width: 100%;
}

.filter-form-container .row {
  display: flex;
  flex-wrap: nowrap; /* Keep all elements in a single row */
  width: 100%;
}

.filter-form-container .col-md-3,
.filter-form-container .col-md-2 {
  flex: 1; /* Equal width distribution */
  min-width: 0; /* Allow columns to shrink */
  max-width: 20%; /* Cap each column to 20% of container width */
}

.filter-form-container .form-select,
.filter-form-container .form-control {
  border-radius: 6px;
  border: 1px solid #ced4da;
  padding: 6px 8px; /* Reduced padding for compactness */
  font-size: 0.85rem; /* Smaller font for better fit */
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  width: 100%;
  background-color: #fff;
  box-sizing: border-box;
}

.filter-form-container .form-select:focus,
.filter-form-container .form-control:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.2);
  outline: none;
}

.filter-form-container .form-label {
  font-weight: 500;
  color: #2d3748;
  margin-bottom: 4px; /* Reduced margin for compactness */
  font-size: 0.85rem;
  white-space: nowrap; /* Prevent label wrapping */
  overflow: hidden;
  text-overflow: ellipsis; /* Truncate long labels */
}

.filter-form-container .btn-primary {
  background-color: #007bff;
  color: white;
  padding: 6px 8px; /* Match input padding */
  font-size: 0.85rem;
  border-radius: 6px;
  transition: background-color 0.2s ease;
  width: 100%;
  height: 36px; /* Match input height */
  box-sizing: border-box;
}

.filter-form-container .btn-primary:hover {
  background-color: #0056b3;
}

/* Responsive adjustments to prevent scrolling */
@media (max-width: 1200px) {
  .filter-form-container {
    padding: 12px;
    gap: 6px;
  }

  .filter-form-container .form-select,
  .filter-form-container .form-control,
  .filter-form-container .btn-primary {
    font-size: 0.8rem;
    padding: 5px 6px;
  }

  .filter-form-container .form-label {
    font-size: 0.8rem;
  }

  .filter-form-container .col-md-3,
  .filter-form-container .col-md-2 {
    max-width: 20%; /* Maintain equal distribution */
  }
}

@media (max-width: 768px) {
  .filter-form-container {
    padding: 10px;
    gap: 4px;
  }

  .filter-form-container .form-select,
  .filter-form-container .form-control,
  .filter-form-container .btn-primary {
    font-size: 0.75rem;
    padding: 4px 5px;
  }

  .filter-form-container .form-label {
    font-size: 0.75rem;
    margin-bottom: 3px;
  }

  .filter-form-container .col-md-3,
  .filter-form-container .col-md-2 {
    max-width: 20%;
  }
}

@media (max-width: 576px) {
  .filter-form-container {
    padding: 8px;
    gap: 3px;
  }

  .filter-form-container .form-select,
  .filter-form-container .form-control,
  .filter-form-container .btn-primary {
    font-size: 0.7rem;
    padding: 3px 4px;
  }

  .filter-form-container .form-label {
    font-size: 0.7rem;
    margin-bottom: 2px;
  }

  .filter-form-container .col-md-3,
  .filter-form-container .col-md-2 {
    max-width: 20%;
  }
}
</style>

<main class="dashboard-content">
  <section class="content-main">
        <div class="content-header row">
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="content-body card-title">Order Management</h2>
      </div>
    </div>

        <div class="card-header text-center mb-4">
      <form id="searchForm" action="/admin/orderManagement" method="get" class="d-inline-block w-100">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill mb-3">
          <input
            type="text"
            class="form-control border-0 rounded-pill"
            id="searchInput"
            placeholder="Search by Order ID, Name, or Email"
            name="search"
            value="<%= searchQuery %>"
          />
          <button class="btn border-0" type="submit">Search</button>
          <button class="btn border-0" id="resetButton" type="button">Cancel</button>
        </div>
      </form>

      <div class="filter-form-container">
        <form id="filterForm" action="/admin/orderManagement" method="get" class="row g-3">
          <div class="col-md-3">
            <label for="paymentMethod" class="form-label">Payment Method</label>
            <select name="paymentMethod" class="form-select" id="paymentMethod">
              <option value="">All Payment Methods</option>
              <option value="COD" <%= paymentMethod === 'COD' ? 'selected' : '' %>>COD</option>
              <option value="RAZORPAY" <%= paymentMethod === 'RAZORPAY' ? 'selected' : '' %>>Razorpay</option>
              <option value="WALLET" <%= paymentMethod === 'WALLET' ? 'selected' : '' %>>Wallet</option>
            </select>
          </div>
          <div class="col-md-3">
            <label for="paymentStatus" class="form-label">Payment Status</label>
            <select name="paymentStatus" class="form-select" id="paymentStatus">
              <option value="">All Payment Statuses</option>
              <option value="Completed" <%= paymentStatus === 'Completed' ? 'selected' : '' %>>Completed</option>
              <option value="Pending" <%= paymentStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Failed" <%= paymentStatus === 'Failed' ? 'selected' : '' %>>Failed</option>
              <option value="Cancelled" <%= paymentStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
              <option value="Refunded" <%= paymentStatus === 'Refunded' ? 'selected' : '' %>>Refunded</option>
            </select>
          </div>
          <div class="col-md-2">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" name="startDate" class="form-control" id="startDate" value="<%= startDate || '' %>">
          </div>
          <div class="col-md-2">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" name="endDate" class="form-control" id="endDate" value="<%= endDate || '' %>">
          </div>
          <div class="col-md-2 d-flex align-items-end">
            <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
          </div>
          <input type="hidden" name="search" value="<%= searchQuery %>">
        </form>
      </div>
    </div>

    <div class="right mt-5">
      <table class="table table-striped">
        <thead>
          <tr>
            <th style="width: 5%;" class="text-center">#</th>
            <th style="width: 20%;">Order ID</th>
            <th style="width: 15%;">Customer</th>
            <th style="width: 10%;">Date</th>
            <th style="width: 10%;">Total</th>
            <th style="width: 15%;">Payment</th>
            <th style="width: 15%;">Delivery Status</th>
            <th style="width: 25%;">Actions</th>
          </tr>
        </thead>
<tbody>
  <% if (orders && orders.length > 0) { %>
    <% orders.forEach(function(order, index) { %>
      <tr>
        <td class="text-center"><%= (page - 1) * perPage + index + 1 %></td>
        <td><%= order._id.toString().slice(-8).toUpperCase() %></td>
        <td><%= order.userId ? order.userId.name : 'Unknown' %></td>
        <td><%= order.orderDate ? order.orderDate.toISOString().split('T')[0] : '' %></td>
        <td>₹<%= order.finalTotal.toLocaleString() %></td>
        <td>
          <span><%= order.paymentMethod %></span>
          <span class="badge <%= order.paymentStatus === 'Completed' ? 'alert-success' : order.paymentStatus === 'Pending' ? 'alert-warning' : 'alert-danger' %>">
            <%= order.paymentStatus %>
          </span>
        </td>
        <td>
          <% if (order.status === 'Failed' || order.deliveryStatus === 'Failed' || order.paymentStatus === 'Failed') { %>
            <span class="badge status-failed">Failed</span>
          <% } else { %>
            <% if (order.deliveryStatus === 'ReturnRequested' || order.items.some(function(i) { return i.status === 'ReturnRequested'; })) { %>
              <span class="badge status-return-requested">Return Requested</span>
            <% } else if (order.deliveryStatus === 'Cancelled') { %>
              <span class="badge status-cancelled">Cancelled</span>
            <% } else if (order.deliveryStatus === 'Returned') { %>
              <span class="badge status-returned">All Returned</span>
            <% } else { %>
              <% 
                const returnedItems = order.items.filter(function(i) { return i.status === 'Returned'; });
                const totalItems = order.items.length;
              %>
              <% if (returnedItems.length > 0 && returnedItems.length < totalItems) { %>
                <div class="delivery-status-container">
                  <select class="form-select status-select mb-1" data-order-id="<%= order._id %>" data-current-status="<%= order.deliveryStatus %>">
                    <% const statuses = ['Placed', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
                    <% const currentIndex = statuses.indexOf(order.deliveryStatus); %>
                    <% statuses.forEach(function(status, index) { %>
                      <option value="<%= status %>" <%= status === order.deliveryStatus ? 'selected' : '' %> <%= index < currentIndex ? 'disabled' : '' %>><%= status %></option>
                    <% }) %>
                  </select>
                  <div class="return-info">
                    <small class="text-warning fw-bold">
                      <i class="fas fa-undo-alt"></i> <%= returnedItems.length %> of <%= totalItems %> items returned
                    </small>
                  </div>
                </div>
              <% } else { %>
                <select class="form-select status-select" data-order-id="<%= order._id %>" data-current-status="<%= order.deliveryStatus %>">
                  <% const statuses = ['Placed', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
                  <% const currentIndex = statuses.indexOf(order.deliveryStatus); %>
                  <% statuses.forEach(function(status, index) { %>
                    <option value="<%= status %>" <%= status === order.deliveryStatus ? 'selected' : '' %> <%= index < currentIndex ? 'disabled' : '' %>><%= status %></option>
                  <% }) %>
                </select>
              <% } %>
            <% } %>
          <% } %>
        </td>
        <td>
          <div class="modal-buttons">
            <a href="/admin/view-order/<%= order._id %>" class="btn btn-info">View Details</a>
            <% if (order.status !== 'Failed' && order.deliveryStatus !== 'Failed' && order.paymentStatus !== 'Failed') { %>
              <% if (order.items.some(function(i) { return i.status === 'ReturnRequested'; })) { %>
                <a href="/admin/manage-returns/<%= order._id %>" class="btn btn-warning">Manage Returns</a>
              <% } %>
              <% if (['Placed', 'Processing', 'Shipped', 'Out for Delivery'].includes(order.deliveryStatus)) { %>
                <button class="btn btn-danger cancel-btn" data-order-id="<%= order._id %>">Cancel Order</button>
              <% } %>
            <% } %>
            <% if (order.deliveryStatus !== 'Cancelled' && order.deliveryStatus !== 'Returned' && order.deliveryStatus !== 'Failed') { %>

        <a href="/admin/update-tracking/<%= order._id %>" class="btn btn-track">Update Tracking</a>
      <% } %>
          </div>
        </td>
      </tr>
    <% }) %>
  <% } else { %>
    <tr>
      <td colspan="8" class="text-center">No orders found.</td>
    </tr>
  <% } %>
</tbody>
      </table>
    </div>
    <nav>
      <ul class="pagination">
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= page == i ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>&search=<%= encodeURIComponent(searchQuery) %>&paymentMethod=<%= encodeURIComponent(paymentMethod) %>&paymentStatus=<%= encodeURIComponent(paymentStatus) %>&startDate=<%= encodeURIComponent(startDate) %>&endDate=<%= encodeURIComponent(endDate) %>"><%= i %></a>
          </li>
        <% } %>
      </ul>
    </nav>
  </section>

  <div class="confirmation-modal" id="confirmationModal" style="display: none;">
    <div class="modal-content">
      <p id="modalMessage"></p>
      <div class="modal-buttons">
        <button class="btn btn-primary" id="confirmAction">OK</button>
        <button class="btn btn-secondary" id="cancelAction">Cancel</button>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // 🔍 Search and Filter Combined
    document.getElementById('searchForm')?.addEventListener('submit', (e) => {
      e.preventDefault();
      const search = document.getElementById('searchInput').value.trim();
      const queryParams = new URLSearchParams(window.location.search);
      queryParams.set('search', search);
      queryParams.set('page', 1); // Reset to first page
      window.location.href = `/admin/orderManagement?${queryParams.toString()}`;
    });

    document.getElementById('filterForm')?.addEventListener('submit', (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const queryParams = new URLSearchParams();
      
      // Include search term
      const searchValue = document.getElementById('searchInput').value.trim();
      if (searchValue) {
        queryParams.set('search', searchValue);
      }
      
      // Include filters
      for (let [key, value] of formData.entries()) {
        if (value) {
          queryParams.set(key, value);
        }
      }
      
      queryParams.set('page', 1); // Reset to first page
      window.location.href = `/admin/orderManagement?${queryParams.toString()}`;
    });

    // ❌ Reset All Filters and Search
    document.getElementById('resetButton')?.addEventListener('click', () => {
      window.location.href = '/admin/orderManagement';
    });

    // 🚚 Update Delivery Status
    document.querySelectorAll('.status-select').forEach(select => {
      select.addEventListener('change', (e) => {
        const orderId = e.target.dataset.orderId;
        const deliveryStatus = e.target.value;

        Swal.fire({
          title: 'Confirm Status Update',
          text: `Are you sure you want to update the status to "${deliveryStatus}"?`,
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Yes',
          cancelButtonText: 'No',
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              const response = await fetch(`/admin/orders/${orderId}/delivery-status`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ deliveryStatus })
              });
              const data = await response.json();

              if (data.success) {
                Swal.fire('Updated!', 'Delivery status has been updated.', 'success').then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire('Error', data.message || 'Failed to update status', 'error');
                e.target.value = e.target.dataset.currentStatus;
              }
            } catch (err) {
              Swal.fire('Server Error', 'Please try again later.', 'error');
              e.target.value = e.target.dataset.currentStatus;
            }
          } else {
            e.target.value = e.target.dataset.currentStatus;
          }
        });
      });
    });

    document.querySelectorAll('.cancel-btn').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.dataset.orderId;

        Swal.fire({
          title: 'Cancel Order',
          text: 'Please provide a reason for cancellation:',
          input: 'text',
          inputPlaceholder: 'Enter cancellation reason',
          inputAttributes: {
            autocomplete: 'off'
          },
          showCancelButton: true,
          confirmButtonText: 'Cancel Order',
          cancelButtonText: 'Back',
          inputValidator: (value) => {
            if (!value) {
              return 'Cancellation reason is required';
            }
          }
        }).then(async (result) => {
          if (result.isConfirmed) {
            const reason = result.value;
            try {
              const response = await fetch(`/admin/cancel-order/${orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason })
              });
              const data = await response.json();

              if (data.success) {
                Swal.fire('Cancelled!', 'Order has been cancelled.', 'success').then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire('Error', data.message || 'Cancellation failed.', 'error');
              }
            } catch (error) {
              Swal.fire('Server Error', 'Please try again later.', 'error');
            }
          }
        });
      });
    });
  </script>
</main>