<%- include('../partials/admin/header') %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<main class="dashboard-content">
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 16px;
      line-height: 1.6;
      background-color: #f8f9fa;
      color: #2c3e50;
    }

    .content-main {
      max-width: 1200px;
      margin: 0 auto;
      padding: 30px 20px;
    }

    .content-header {
      background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
      padding: 25px 30px;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
      margin-bottom: 30px;
      border-left: 4px solid #4a6a4d;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }

    .content-title {
      color: #2c3e50;
      font-size: 2rem;
      font-weight: 700;
      margin: 0;
      letter-spacing: -0.5px;
    }

    .card {
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
      margin-bottom: 30px;
      overflow: hidden;
      border: none;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }

    .card-header {
      background: linear-gradient(135deg, #4a6a4d 0%, #5a7a5d 100%);
      color: white;
      padding: 20px 30px;
      font-size: 1.4rem;
      font-weight: 600;
      border-bottom: none;
      position: relative;
    }

    .card-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0.1) 100%);
    }

    .card-header h5 {
      margin: 0;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .card-header h5::before {
      content: '';
      width: 4px;
      height: 20px;
      background: rgba(255,255,255,0.8);
      border-radius: 2px;
    }

    .card-body {
      padding: 30px;
    }

    .order-details-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 25px;
    }

    .detail-item {
      background: #f8f9fa;
      padding: 15px 20px;
      border-radius: 8px;
      border-left: 3px solid #4a6a4d;
    }

    .detail-item strong {
      color: #2c3e50;
      font-weight: 600;
      display: block;
      margin-bottom: 5px;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .detail-item span {
      color: #495057;
      font-size: 1.1rem;
    }

    .order-actions {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #e9ecef;
    }

    .item-details {
      display: flex;
      align-items: flex-start;
      padding: 25px;
      border-bottom: 1px solid #e9ecef;
      background: #fff;
      transition: background-color 0.2s ease;
      position: relative;
    }

    .item-details:hover {
      background: #f8f9fa;
    }

    .item-details:last-child {
      border-bottom: none;
    }

    .item-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
      margin-right: 20px;
      border: 2px solid #e9ecef;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .item-info {
      flex: 1;
      min-width: 0;
    }

    .item-info h6 {
      font-size: 1.3rem;
      font-weight: 600;
      margin-bottom: 10px;
      color: #2c3e50;
      line-height: 1.3;
    }

    .item-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-bottom: 15px;
    }

    .meta-item {
      background: #f8f9fa;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 0.95rem;
      color: #495057;
    }

    .meta-item strong {
      color: #2c3e50;
    }

    .item-actions {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
      margin-top: 15px;
    }

    .btn-action {
      padding: 12px 20px;
      font-size: 0.9rem;
      border-radius: 8px;
      color: white;
      border: none;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      font-weight: 500;
      transition: all 0.2s ease;
      text-decoration: none;
      min-width: 160px;
      position: relative;
      overflow: hidden;
    }

    .btn-action::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }

    .btn-action:hover::before {
      left: 100%;
    }

    .btn-success {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      box-shadow: 0 4px 6px rgba(40, 167, 69, 0.3);
    }

    .btn-success:hover {
      background: linear-gradient(135deg, #218838 0%, #1a9b84 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(40, 167, 69, 0.4);
    }

    .btn-danger {
      background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
      box-shadow: 0 4px 6px rgba(220, 53, 69, 0.3);
    }

    .btn-danger:hover {
      background: linear-gradient(135deg, #c82333 0%, #e66a00 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(220, 53, 69, 0.4);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
      color: white;
      text-decoration: none;
      padding: 12px 20px;
      border-radius: 8px;
      font-size: 1rem;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      transition: all 0.2s ease;
      box-shadow: 0 4px 6px rgba(108, 117, 125, 0.3);
    }

    .btn-secondary:hover {
      background: linear-gradient(135deg, #5a6268 0%, #3d4246 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(108, 117, 125, 0.4);
      color: white;
    }

    .status-badge {
      padding: 10px 16px;
      border-radius: 20px;
      font-size: 0.85rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      display: inline-flex;
      align-items: center;
      gap: 6px;
      min-width: 120px;
      justify-content: center;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .status-badge::before {
      content: '';
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: currentColor;
      opacity: 0.8;
    }

    .status-return-requested {
      background: linear-gradient(135deg, #fd7e14 0%, #ff6b35 100%);
      color: white;
    }

    .status-returned {
      background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
      color: white;
    }

    .status-active {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
    }

    .status-delivered {
      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
      color: white;
    }

    .return-info {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
      color: #856404;
    }

    .return-info strong {
      color: #533a03;
    }

    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px 20px;
      border-radius: 8px;
      margin-top: 20px;
      border-left: 4px solid #dc3545;
      display: none;
      font-weight: 500;
    }

    .loading {
      pointer-events: none;
      opacity: 0.6;
      position: relative;
    }

    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      transform: translate(-50%, -50%);
    }

    @keyframes spin {
      0% { transform: translate(-50%, -50%) rotate(0deg); }
      100% { transform: translate(-50%, -50%) rotate(360deg); }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .content-main {
        padding: 20px 15px;
      }

      .content-header {
        flex-direction: column;
        align-items: flex-start;
        padding: 20px;
      }

      .content-title {
        font-size: 1.5rem;
      }

      .card-body {
        padding: 20px;
      }

      .order-details-grid {
        grid-template-columns: 1fr;
        gap: 15px;
      }

      .item-details {
        flex-direction: column;
        align-items: flex-start;
        padding: 20px;
      }

      .item-image {
        margin-right: 0;
        margin-bottom: 15px;
        align-self: center;
      }

      .item-actions {
        justify-content: center;
        width: 100%;
      }

      .btn-action {
        flex: 1;
        min-width: auto;
      }

      .order-actions {
        flex-direction: column;
      }
    }

    @media (max-width: 480px) {
      .content-title {
        font-size: 1.3rem;
      }

      .btn-action {
        font-size: 0.8rem;
        padding: 10px 15px;
      }

      .meta-item {
        font-size: 0.85rem;
      }
    }
  </style>

  <section class="content-main">
    <div class="content-header">
      <h2 class="content-title">
        <i class="bi bi-arrow-return-left"></i>
        Manage Returns for Order #<%= order._id.toString().slice(-8).toUpperCase() %>
      </h2>
      <a href="/admin/orderManagement" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back to Orders
      </a>
    </div>

    <div class="card">
      <div class="card-header">
        <h5><i class="bi bi-receipt"></i> Order Details</h5>
      </div>
      <div class="card-body">
        <div class="order-details-grid">
          <div class="detail-item">
            <strong>Order Date</strong>
            <span><%= order.orderDate.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' }) %></span>
          </div>
          <div class="detail-item">
            <strong>Customer Name</strong>
            <span><%= order.userId?.name || 'Unknown' %></span>
          </div>
          <div class="detail-item">
            <strong>Email</strong>
            <span><%= order.userId?.email || 'N/A' %></span>
          </div>
          <div class="detail-item">
            <strong>Total Amount</strong>
            <span>₹<%= order.finalTotal.toLocaleString('en-IN') %></span>
          </div>
          <div class="detail-item">
            <strong>Payment Status</strong>
            <span><%= order.paymentStatus %></span>
          </div>
          <div class="detail-item">
            <strong>Delivery Status</strong>
            <span class="status-badge status-<%= order.deliveryStatus.toLowerCase().replace(' ', '-') %>">
              <%= order.deliveryStatus %>
            </span>
          </div>
        </div>
        
      

    <div class="card">
      <div class="card-header">
        <h5><i class="bi bi-box-seam"></i> Items</h5>
      </div>
      <div class="card-body" style="padding: 0;">
        <% order.items.forEach(item => { %>
          <div class="item-details">
            <img class="item-image" src="<%= item.productId?.images && item.productId.images.length > 0 ? item.productId.images[0].url : '/images/placeholder.png' %>" alt="<%= item.productId?.productName || 'Product' %>">
            <div class="item-info">
              <h6><%= item.productId?.productName || 'Product Not Found' %> (<%= item.variantSize || 'N/A' %>)</h6>
              
              <div class="item-meta">
                <div class="meta-item">
                  <strong>Quantity:</strong> <%= item.quantity || 1 %>
                </div>
                <div class="meta-item">
                  <strong>Total:</strong> ₹<%= item.finalItemTotal.toLocaleString('en-IN') %>
                </div>
              </div>

              <div style="margin-bottom: 15px;">
                <span class="status-badge status-<%= item.status.toLowerCase().replace(' ', '-') %>">
                  <%= item.status %>
                </span>
              </div>

              <% if (item.status === 'ReturnRequested') { %>
                <div class="return-info">
                  <strong>Return Reason:</strong> <%= item.returnReason || 'N/A' %>
                </div>
              <% } else if (item.status === 'Returned') { %>
                <div class="return-info">
                  <strong>Return Reason:</strong> <%= item.returnReason || 'N/A' %>
                  <% if (item.returnApproved !== null) { %>
                    <br><strong>Status:</strong> <%= item.returnApproved ? 'Approved' : 'Rejected' %>
                    <% if (!item.returnApproved && item.returnRejectionReason) { %>
                      <br><strong>Rejection Reason:</strong> <%= item.returnRejectionReason %>
                    <% } %>
                  <% } %>
                </div>
              <% } %>
              
              <% if (item.status === 'ReturnRequested') { %>
                <div class="item-actions">
                  <button class="btn-action btn-success approve-return-item" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">
                    <i class="bi bi-check-circle"></i> Approve Return
                  </button>
                  <button class="btn-action btn-danger reject-return-item" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">
                    <i class="bi bi-x-circle"></i> Reject Return
                  </button>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="error-message"></div>
  </section>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function showError(message) {
      const error = document.querySelector('.error-message');
      error.textContent = message;
      error.style.display = 'block';
      setTimeout(() => error.style.display = 'none', 5000);
    }

    function setLoading(button, isLoading) {
      if (isLoading) {
        button.classList.add('loading');
        button.disabled = true;
      } else {
        button.classList.remove('loading');
        button.disabled = false;
      }
    }

    document.querySelectorAll('.approve-return-order').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const orderId = e.target.dataset.orderId;
        if (confirm('Are you sure you want to approve this order return? This action cannot be undone.')) {
          setLoading(e.target, true);
          try {
            const response = await fetch(`/admin/orders/approve-return/${orderId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            if (data.success) {
              alert('Order return approved successfully');
              window.location.href = '/admin/orderManagement';
            } else {
              showError(data.message || 'Failed to approve return');
            }
          } catch (err) {
            showError('Server error occurred. Please try again.');
          } finally {
            setLoading(e.target, false);
          }
        }
      });
    });

    document.querySelectorAll('.reject-return-order').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const orderId = e.target.dataset.orderId;
        const reason = prompt('Please provide a reason for rejecting the return:');
        if (reason && reason.trim()) {
          setLoading(e.target, true);
          try {
            const response = await fetch(`/admin/orders/reject-return/${orderId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ rejectionReason: reason.trim() })
            });
            const data = await response.json();
            if (data.success) {
              alert('Order return rejected successfully');
              window.location.href = '/admin/orderManagement';
            } else {
              showError(data.message || 'Failed to reject return');
            }
          } catch (err) {
            showError('Server error occurred. Please try again.');
          } finally {
            setLoading(e.target, false);
          }
        } else if (reason !== null) {
          showError('Please provide a valid reason for rejection');
        }
      });
    });

document.querySelectorAll('.approve-return-item').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const orderId = e.target.dataset.orderId;
    const itemId = e.target.dataset.itemId;

    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "You want to approve this item return. This action cannot be undone.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, approve it!'
    });

    if (result.isConfirmed) {
      setLoading(e.target, true);
      try {
        const response = await fetch(`/admin/orders/approve-return-item/${orderId}/${itemId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await response.json();
        if (data.success) {
          await Swal.fire('Approved!', 'Item return approved successfully.', 'success');
          window.location.reload();
        } else {
          showError(data.message || 'Failed to approve item return');
        }
      } catch (err) {
        showError('Server error occurred. Please try again.');
      } finally {
        setLoading(e.target, false);
      }
    }
  });
});


document.querySelectorAll('.reject-return-item').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const orderId = e.target.dataset.orderId;
    const itemId = e.target.dataset.itemId;

    const { value: reason, isConfirmed } = await Swal.fire({
      title: 'Reject Item Return',
      input: 'text',
      inputLabel: 'Reason for rejection',
      inputPlaceholder: 'Enter your reason...',
      inputAttributes: {
        autocomplete: 'off'   
      },
      inputValidator: (value) => {
        if (!value.trim()) {
          return 'Please enter a valid reason!';
        }
      },
      showCancelButton: true,
      confirmButtonText: 'Reject',
      cancelButtonText: 'Cancel',
      icon: 'warning'
    });

    if (isConfirmed && reason.trim()) {
      setLoading(e.target, true);
      try {
        const response = await fetch(`/admin/orders/reject-return-item/${orderId}/${itemId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rejectionReason: reason.trim() })
        });
        const data = await response.json();
        if (data.success) {
          await Swal.fire('Rejected!', 'Item return has been rejected.', 'success');
          window.location.reload();
        } else {
          showError(data.message || 'Failed to reject item return');
        }
      } catch (err) {
        showError('Server error occurred. Please try again.');
      } finally {
        setLoading(e.target, false);
      }
    }
  });
});

  </script>
</main>