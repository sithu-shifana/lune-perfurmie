<%- include('../partials/user/header') %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  body {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    font-family: 'Outfit', sans-serif;
    min-height: 100vh;
  }

  .main-content {
    padding: 25px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-header {
    margin-bottom: 30px;
    text-align: center;
  }

  .page-header h2 {
    color: #2c3e50;
    font-weight: 600;
    font-size: 2.2rem;
    margin-bottom: 10px;
  }

  .page-header p {
    color: #6c757d;
    font-size: 1.1rem;
  }

  .address-card {
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    margin-bottom: 25px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .address-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  .address-header {
    background: linear-gradient(135deg, #343a40 0%, #495057 100%);
    color: white;
    padding: 20px 25px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
  }

  .address-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .address-name {
    font-weight: 700;
    font-size: 1.1rem;
    color: #fff;
  }

  .default-badge {
    font-size: 0.85rem;
    padding: 8px 16px;
    border-radius: 20px;
    color: #fff;
    background-color: #799880;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
    display: inline-block;
  }

  .address-body {
    padding: 20px 25px;
    border-bottom: 1px solid #f8f9fa;
  }

  .address-details {
    color: #6c757d;
    font-size: 0.95rem;
    line-height: 1.6;
  }

  .address-details p {
    margin: 0 0 8px 0;
  }

  .address-actions {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    padding: 20px 25px;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
  }

  .btn-edit, .btn-delete, .btn-default {
    font-size: 0.8rem;
    padding: 8px 16px;
    border: none;
    border-radius: 20px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .btn-edit {
    background: linear-gradient(135deg, #78959b 0%, #465456 100%);
    color: #fff;
  }

  .btn-edit:hover {
    background: linear-gradient(135deg, #363a3b 0%, #383e3f 100%);
  }

  .btn-delete {
    background: linear-gradient(135deg, #482e30 0%, #52252a 100%);
    color: #fff;
  }

  .btn-delete:hover {
    background: linear-gradient(135deg, #3d2729 0%, #552c30 100%);
    transform: translateY(-1px);
  }

  .btn-default {
    background: #fff;
    color: #343a40;
    border: 2px solid #343a40;
  }

  .btn-default:hover:not(:disabled) {
    background: #343a40;
    color: #fff;
    transform: translateY(-1px);
  }

  .btn-default:disabled {
    background: #f0f0f0;
    color: #999;
    border-color: #e0e0e0;
    cursor: not-allowed;
  }

  .btn-add-address {
        background: linear-gradient(135deg, #282024 0%, #3d373a 100%);

    color: white;
    border: none;
    padding: 12px 30px;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: block;
    margin: 30px auto 0;
    max-width: 200px;
    transition: all 0.3s ease;
  }

  .btn-add-address:hover {
        background: linear-gradient(135deg, #c5b5c0 0%, #534c50 100%);

    transform: translateY(-2px);
  }

  .no-address {
    text-align: center;
    padding: 60px 20px;
    color: #6c757d;
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .no-address i {
    font-size: 5rem;
    margin-bottom: 25px;
    color: #dee2e6;
  }

  .no-address h4 {
    color: #495057;
    font-weight: 600;
    margin-bottom: 15px;
  }

  .no-address p {
    font-size: 1.1rem;
    margin-bottom: 25px;
    line-height: 1.6;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 20px;
  }

  .modal-content {
    background: #fff;
    border-radius: 15px;
    padding: 32px;
    width: 100%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
  }

  .modal-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 24px;
    text-align: center;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-input {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    font-size: 0.95rem;
    background: #fafafa;
    transition: all 0.2s ease;
  }

  .form-input:focus {
    outline: none;
    border-color: #343a40;
    background: #fff;
    box-shadow: 0 0 0 3px rgba(52, 58, 64, 0.1);
  }

  .error-text {
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 4px;
    min-height: 16px;
  }

  .modal-actions {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin-top: 32px;
  }

  .btn-submit {
    background: linear-gradient(135deg, #d00879 0%, #b8065f 100%);
    color: #fff;
    border: none;
    padding: 12px 32px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn-submit:hover {
    background: linear-gradient(135deg, #b8065f 0%, #9f0552 100%);
    transform: translateY(-1px);
  }

  .btn-cancel {
    background: #fff;
    color: #343a40;
    border: 2px solid #343a40;
    padding: 12px 32px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn-cancel:hover {
    background: #343a40;
    color: #fff;
    transform: translateY(-1px);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .main-content {
      padding: 15px;
    }

    .address-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }

    .address-actions {
      width: 100%;
      justify-content: center;
    }

    .modal-content {
      padding: 24px;
      margin: 10px;
    }

    .modal-title {
      font-size: 1.6rem;
    }
  }

  @media (max-width: 480px) {
    .page-header h2 {
      font-size: 1.8rem;
    }

    .address-header {
      padding: 15px 20px;
    }

    .address-body {
      padding: 15px 20px;
    }

    .address-actions {
      padding: 15px 20px;
      flex-direction: column;
    }

    .btn-edit, .btn-delete, .btn-default {
      font-size: 0.75rem;
      padding: 6px 12px;
    }

    .modal-actions {
      flex-direction: column;
    }

    .btn-submit, .btn-cancel {
      width: 100%;
    }
  }
</style>

<div class="content-placeholder">
  <%- include('../partials/user/sidebar') %>

  <div class="main-content">
    <div class="container-fluid">
      <div class="page-header">
        <h2>My Address Book</h2>
        <p>Manage your shipping addresses</p>
      </div>

      <% if (address.length === 0) { %>
        <div class="no-address">
          <i class="fas fa-map-marker-alt"></i>
          <h4>No Addresses Found</h4>
          <p>Add a new address to start shopping with ease!</p>
          <button class="btn-add-address" id="openModalBtn">Add New Address</button>
        </div>
      <% } else { %>
        <% address.forEach(address => { %>
          <div class="address-card">
            <div class="address-header">
              <div class="address-info">
                <span class="address-name"><%= address.name %></span>
              </div>
              <% if (address.isDefault) { %>
                <span class="default-badge">Default</span>
              <% } %>
            </div>
            <div class="address-body">
              <div class="address-details">
                <p><%= address.street %></p>
                <p><%= address.city %>, <%= address.state %> <%= address.pinCode %></p>
                <p><%= address.country %></p>
                <p><strong>Phone:</strong> <%= address.phone %></p>
              </div>
            </div>
            <div class="address-actions">
              <button class="btn btn-edit" onclick='editAddress(<%- JSON.stringify(address) %>)'>Edit</button>
              <button class="btn btn-delete" onclick="deleteAddress('<%= address._id %>')">Delete</button>
              <form action="/set-default-address/<%= address._id %>" method="POST" style="display:inline;">
                <button 
                  class="btn btn-default" 
                  type="submit"
                  <% if (address.isDefault) { %>disabled<% } %>
                >
                  <% if (address.isDefault) { %>Default<% } else { %>Set Default<% } %>
                </button>
              </form>
            </div>
          </div>
        <% }) %>
        <button class="btn-add-address" id="openModalBtn">Add New Address</button>
      <% } %>

      <!-- Add Address Modal -->
      <div class="modal" id="addressModal">
        <div class="modal-content">
          <h3 class="modal-title">Add New Address</h3>
          <form id="addressForm">
            <div class="form-group">
              <input type="text" name="name" placeholder="Full Name" class="form-input" />
              <p class="error-text" id="name-error"></p>
            </div>
            <div class="form-group">
              <input type="tel" name="phone" placeholder="Phone Number" class="form-input" />
              <p class="error-text" id="phone-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="street" placeholder="Street Address" class="form-input" />
              <p class="error-text" id="street-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="city" placeholder="City" class="form-input" />
              <p class="error-text" id="city-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="state" placeholder="State" class="form-input" />
              <p class="error-text" id="state-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="pinCode" placeholder="Pin Code" class="form-input" />
              <p class="error-text" id="pinCode-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="country" placeholder="Country" value="India" class="form-input" />
              <p class="error-text" id="country-error"></p>
            </div>
            <div class="modal-actions">
              <button type="submit" class="btn-submit">Save Address</button>
              <button type="button" class="btn-cancel" id="closeModalBtn">Cancel</button>
            </div>
          </form>
        </div>
      </div>

      <!-- Edit Address Modal -->
      <div class="modal" id="editAddressModal">
        <div class="modal-content">
          <h3 class="modal-title">Edit Address</h3>
          <form id="editAddressForm">
            <input type="hidden" name="id" id="edit-id" />
            <div class="form-group">
              <input type="text" name="name" id="edit-name" placeholder="Full Name" class="form-input" />
              <p class="error-text" id="edit-name-error"></p>
            </div>
            <div class="form-group">
              <input type="tel" name="phone" id="edit-phone" placeholder="Phone Number" class="form-input" />
              <p class="error-text" id="edit-phone-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="street" id="edit-street" placeholder="Street Address" class="form-input" />
              <p class="error-text" id="edit-street-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="city" id="edit-city" placeholder="City" class="form-input" />
              <p class="error-text" id="edit-city-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="state" id="edit-state" placeholder="State" class="form-input" />
              <p class="error-text" id="edit-state-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="pinCode" id="edit-pinCode" placeholder="Pin Code" class="form-input" />
              <p class="error-text" id="edit-pinCode-error"></p>
            </div>
            <div class="form-group">
              <input type="text" name="country" id="edit-country" placeholder="Country" value="India" class="form-input" />
              <p class="error-text" id="edit-country-error"></p>
            </div>
            <div class="modal-actions">
              <button type="submit" class="btn-submit">Update Address</button>
              <button type="button" class="btn-cancel" id="closeEditModalBtn">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
  // Address Modal
  const addressForm = document.getElementById('addressForm');
  const addressModal = document.getElementById('addressModal');
  const openModalBtn = document.getElementById('openModalBtn');
  const closeModalBtn = document.getElementById('closeModalBtn');

  // Edit Address Modal
  const editAddressForm = document.getElementById('editAddressForm');
  const editAddressModal = document.getElementById('editAddressModal');
  const closeEditModalBtn = document.getElementById('closeEditModalBtn');

  // Show Message Function with SweetAlert2
  function showMessage(title, text, icon = 'success') {
    Swal.fire({
      title: title,
      text: text,
      icon: icon,
      confirmButtonText: 'OK',
      timer: 1000,
      timerProgressBar: true,
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      didOpen: () => {
        Swal.getPopup().style.padding = '12px 20px';
        Swal.getPopup().style.fontSize = '14px';
        Swal.getPopup().style.minWidth = '250px';
        Swal.getPopup().style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
        Swal.getPopup().style.borderRadius = '6px';
      }
    });
  }

  // Add Address Modal Handlers
  openModalBtn.addEventListener('click', () => {
    addressModal.style.display = 'flex';
    addressForm.reset();
    const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
    errorFields.forEach((field) => {
      document.getElementById(`${field}-error`).textContent = '';
    });
  });

  closeModalBtn.addEventListener('click', () => {
    addressModal.style.display = 'none';
  });

  addressModal.addEventListener('click', (e) => {
    if (e.target === addressModal) {
      addressModal.style.display = 'none';
    }
  });

  addressForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
    errorFields.forEach((field) => {
      document.getElementById(`${field}-error`).textContent = '';
    });

    const formData = new FormData(addressForm);
    const data = Object.fromEntries(formData);

    try {
      console.log('Submitting new address:', data);
      const res = await fetch('/address-book-add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (res.ok) {
        addressModal.style.display = 'none';
        showMessage('Success', 'Address added successfully!', 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        if (result.errors) {
          console.log('Validation errors:', result.errors);
          for (let field in result.errors) {
            const errorEl = document.getElementById(`${field}-error`);
            if (errorEl) errorEl.textContent = result.errors[field];
          }
        } else {
          showMessage('Error', result.message || 'Failed to add address.', 'error');
        }
      }
    } catch (error) {
      console.error('Add address fetch error:', error);
      showMessage('Error', 'Unable to connect to the server.', 'error');
    }
  });

  // Edit Address Modal Handlers
  function editAddress(address) {
    try {
      console.log('Opening edit modal with address:', address);
      document.getElementById('edit-id').value = address._id || '';
      document.getElementById('edit-name').value = address.name || '';
      document.getElementById('edit-phone').value = address.phone || '';
      document.getElementById('edit-street').value = address.street || '';
      document.getElementById('edit-city').value = address.city || '';
      document.getElementById('edit-state').value = address.state || '';
      document.getElementById('edit-pinCode').value = address.pinCode || '';
      document.getElementById('edit-country').value = address.country || 'India';
      editAddressModal.style.display = 'flex';
      const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
      errorFields.forEach((field) => {
        document.getElementById(`edit-${field}-error`).textContent = '';
      });
    } catch (error) {
      console.error('Error opening edit modal:', error);
      showMessage('Error', 'Failed to open edit modal.', 'error');
    }
  }

  closeEditModalBtn.addEventListener('click', () => {
    editAddressModal.style.display = 'none';
  });

  editAddressModal.addEventListener('click', (e) => {
    if (e.target === editAddressModal) {
      editAddressModal.style.display = 'none';
    }
  });

  editAddressForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const errorFields = ['name', 'phone', 'street', 'city', 'state', 'pinCode', 'country'];
    errorFields.forEach((field) => {
      document.getElementById(`edit-${field}-error`).textContent = '';
    });

    const formData = new FormData(editAddressForm);
    const data = Object.fromEntries(formData);

    try {
      console.log('Submitting edited address:', data);
      const res = await fetch(`/edit-address/${data.id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (res.ok) {
        editAddressModal.style.display = 'none';
        showMessage('Success', 'Address updated successfully!', 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        if (result.errors) {
          console.log('Validation errors:', result.errors);
          for (let field in result.errors) {
            const errorEl = document.getElementById(`edit-${field}-error`);
            if (errorEl) errorEl.textContent = result.errors[field];
          }
        } else {
          showMessage('Error', result.message || 'Failed to update address.', 'error');
        }
      }
    } catch (error) {
      console.error('Edit address fetch error:', error);
      showMessage('Error', 'Unable to connect to the server.', 'error');
    }
  });

  // Delete Address with SweetAlert2
  async function deleteAddress(addressId) {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: 'Do you want to delete this address?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel'
    });

    if (result.isConfirmed) {
      try {
        console.log('Deleting address ID:', addressId);
        const res = await fetch(`/delete-address/${addressId}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
        });
        const result = await res.json();
        if (res.ok) {
          showMessage('Success', 'Address deleted successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showMessage('Error', result.message || 'Failed to delete address.', 'error');
        }
      } catch (error) {
        console.error('Delete address fetch error:', error);
        showMessage('Error', 'Unable to connect to the server.', 'error');
      }
    }
  }

  // Set Default Address Forms
  document.addEventListener('DOMContentLoaded', function () {
    const defaultForms = document.querySelectorAll('form[action*="/set-default-address/"]');
    defaultForms.forEach((form) => {
      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const addressId = this.action.split('/').pop();
        try {
          console.log('Setting default address ID:', addressId);
          const res = await fetch(`/set-default-address/${addressId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
          });
          const result = await res.json();
          if (res.ok) {
            showMessage('Success', result.message || 'Default address updated successfully', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showMessage('Error', result.message || 'Failed to set default address', 'error');
          }
        } catch (error) {
          console.error('Set default fetch error:', error);
          showMessage('Error', 'Unable to connect to the server', 'error');
        }
      });
    });
  });
</script>

<%- include('../partials/user/sidebarFooter') %>