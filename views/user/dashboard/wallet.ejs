<%- include('../partials/user/header') %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<style>
  body {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    font-family: 'Outfit', sans-serif;
    min-height: 100vh;
  }

  .main-content {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-header {
    margin-bottom: 25px;
  }

  .page-header h2 {
    color: #2c3e50;
    font-weight: 600;
    font-size: 2rem;
  }

  .wallet-balance-card {
    background: linear-gradient(135deg, #343a40 0%, #495057 100%);

    color: white;
    border: none;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .wallet-balance-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .wallet-balance-card .text-success {
    color: #e0eae4 !important;
    font-size: 2.2rem;
    font-weight: 700;
  }

  .wallet-balance-card .text-muted {
    color: rgba(255, 255, 255, 0.8) !important;
    font-size: 0.85rem;
  }

  .quick-stats-card {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid #e9ecef;
  }

  .quick-stats-card .card-title {
    color: #2c3e50;
    font-weight: 600;
  }

  .quick-stats-card .text-success {
    color: #4ade80 !important;
  }

  .quick-stats-card .text-danger {
    color: #dc3545 !important;
  }

  .quick-stats-card .text-info {
    color: #17a2b8 !important;
  }

  .transaction-card {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid #e9ecef;
  }

  .transaction-card .card-header {
    background: linear-gradient(135deg, #343a40 0%, #495057 100%);
    color: white;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
  }

  .table-responsive {
    border-radius: 0.375rem;
  }

  .table th {
    font-weight: 600;
    color: #2c3e50;
    font-size: 0.9rem;
    text-transform: uppercase;
  }

  .table td {
    color: #6c757d;
    font-size: 0.85rem;
  }

  .badge {
    font-size: 0.7rem;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: 600;
    text-transform: uppercase;
  }

  .badge-success {
    background: linear-gradient(45deg, #195123, #155e35);
    color: white;
  }

  .badge-danger {
    background: linear-gradient(45deg, #dc3545 0%, #c82333 100%);
    color: white;
  }

  .text-success {
    color: #4ade80 !important;
  }

  .text-danger {
    color: #dc3545 !important;
  }

  .no-transactions {
    text-align: center;
    padding: 50px 15px;
    color: #6c757d;
  }

  .no-transactions i {
    font-size: 4rem;
    margin-bottom: 20px;
    color: #dee2e6;
  }

  .no-transactions h5 {
    color: #495057;
    font-weight: 600;
  }

  .btn {
    padding: 0.7rem 1.2rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s;
    display: inline-flex;
    align-items: center;
    gap: 5px;
  }

  .btn-primary {
    background: linear-gradient(45deg, #9a7f52, #908c93);
    color: white;
  }

  .btn-primary:hover {
    background: linear-gradient(45deg, #191a1d, #373439);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(93, 94, 97, 0.4);
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background: linear-gradient(45deg, #191a1d, #373439);
    transform: translateY(-2px);
  }

  .btn-outline-primary {
    border: 2px solid #343a40;
    color: #343a40;
    font-size: 0.75rem;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: 500;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn-outline-primary:hover {
    background: linear-gradient(45deg, #191a1d, #373439);
    color: white;
    border-color: transparent;
  }

  .modal-content {
    border-radius: 12px;
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
  }

  .modal-header {
    background: linear-gradient(135deg, #343a40 0%, #495057 100%);
    color: white;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
  }

  .modal-title {
    font-size: 1.1rem;
    font-weight: 600;
  }

  .form-label {
    color: #2c3e50;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .form-control {
    border-radius: 8px;
    border: 1px solid #e9ecef;
    font-size: 0.9rem;
  }

  .form-control:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .form-text {
    color: #6c757d;
    font-size: 0.8rem;
  }

  .error-text {
    color: #dc3545;
    font-size: 0.8rem;
    margin-top: 4px;
    min-height: 16px;
  }

  .pagination {
    justify-content: center;
    margin-top: 15px;
  }

  .pagination .page-item {
    margin: 0 3px;
  }

  .pagination .page-link {
    border-radius: 15px;
    color: #343a40;
    font-weight: 500;
    padding: 6px 12px;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }

  .pagination .page-link:hover {
    background: linear-gradient(45deg, #191a1d, #373439);
    color: #fff;
  }

  .pagination .page-item.active .page-link {
    background: linear-gradient(45deg, #4c4a46, #908c93);
    color: #fff;
    border-color: transparent;
  }

  .pagination .page-item.disabled .page-link {
    background: #f0f0f0;
    color: #999;
    border-color: #e0e0e0;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .main-content {
      padding: 15px;
    }

    .page-header h2 {
      font-size: 1.8rem;
    }

    .wallet-balance-card .text-success {
      font-size: 1.8rem;
    }

    .quick-stats-card .row {
      flex-direction: column;
      gap: 10px;
    }

    .quick-stats-card .col-4 {
      width: 100%;
    }

    .table th,
    .table td {
      padding: 8px;
      font-size: 0.8rem;
    }

    .modal-content {
      margin: 15% auto;
      padding: 15px;
    }

    .pagination .page-link {
      padding: 5px 10px;
      font-size: 0.85rem;
    }
  }

  @media (max-width: 480px) {
    .page-header h2 {
      font-size: 1.6rem;
    }

    .btn {
      padding: 0.5rem 0.8rem;
      font-size: 0.8rem;
    }

    .btn-outline-primary {
      font-size: 0.7rem;
      padding: 5px 10px;
    }

    .table th,
    .table td {
      padding: 6px;
      font-size: 0.75rem;
    }

    .table th:nth-child(3),
    .table td:nth-child(3) {
      display: none;
    }

    .pagination .page-link {
      padding: 4px 8px;
      font-size: 0.8rem;
    }
  }
</style>

<div class="content-placeholder">
  <%- include('../partials/user/sidebar') %>

  <div class="main-content">
    <div class="container-fluid">
            <div class="row mb-4 page-header">
        <div class="col-12">
          <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
            <h2 class="mb-0">My Wallet</h2>
            <div>
              <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                <i class="fas fa-plus"></i> Add Money
              </button>
              <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#withdrawMoneyModal">
                <i class="fas fa-money-bill-wave"></i> Withdraw Money
              </button>
            </div>
          </div>
        </div>
      </div>

            <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
          <div class="card wallet-balance-card">
            <div class="card-body text-center">
              <h3 class="text-muted mb-2">Available Balance</h3>
              <h1 class="text-success mb-0">â‚¹<span id="wallet-balance"><%= wallet ? wallet.balance.toFixed(2) : '0.00' %></span></h1>
              <small class="text-muted">Last updated: <%= wallet ? new Date(wallet.updatedAt).toLocaleString() : 'N/A' %></small>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card quick-stats-card">
            <div class="card-body">
              <h5 class="card-title">Quick Stats</h5>
              <div class="row text-center">
                <div class="col-4">
                  <h4 class="text-success"><%= wallet && wallet.transactions ? wallet.transactions.filter(t => t.type === 'credit' && t.status === 'completed').length : 0 %></h4>
                  <small class="text-muted">Credits</small>
                </div>
                <div class="col-4">
                  <h4 class="text-danger"><%= wallet && wallet.transactions ? wallet.transactions.filter(t => t.type === 'debit' && t.status === 'completed').length : 0 %></h4>
                  <small class="text-muted">Debits</small>
                </div>
                <div class="col-4">
                  <h4 class="text-info"><%= wallet && wallet.transactions ? wallet.transactions.length : 0 %></h4>
                  <small class="text-muted">Total</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

            <div class="row">
        <div class="col-12">
          <div class="card transaction-card">
            <div class="card-header">
              <h5 class="mb-0">Transaction History</h5>
            </div>
            <div class="card-body">
              <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% wallet.transactions.forEach(transaction => { %>
                        <tr>
                          <td>
                            <%= new Date(transaction.TransactionTime).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' }) %><br>
                            <small class="text-muted"><%= new Date(transaction.TransactionTime).toLocaleTimeString() %></small>
                          </td>
                          <td>
                            <% if (transaction.type === 'credit') { %>
                              <span class="badge badge-success">Credit</span>
                            <% } else { %>
                              <span class="badge badge-danger">Debit</span>
                            <% } %>
                          </td>
                          <td><%= transaction.description || 'N/A' %></td>
                          <td>
                            <% if (transaction.type === 'credit') { %>
                              <span class="text-success">+â‚¹<%= transaction.amount.toFixed(2) %></span>
                            <% } else { %>
                              <span class="text-danger">-â‚¹<%= transaction.amount.toFixed(2) %></span>
                            <% } %>
                          </td>
                          <td>
                            <% if (transaction.status === 'completed') { %>
                              <span class="badge badge-success">Completed</span>
                            <% } else { %>
                              <span class="badge badge-danger">Failed</span>
                            <% } %>
                          </td>
                        </tr>
                      <% }) %>
                    </tbody>
                  </table>
                </div>

                                <% if (totalPages > 1) { %>
                  <nav aria-label="Transaction pagination">
                    <ul class="pagination">
                      <% if (currentPage > 3) { %>
                        <li class="page-item">
                          <a class="page-link" href="?page=1">1</a>
                        </li>
                        <% if (currentPage > 4) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                          </li>
                        <% } %>
                      <% } %>
                      <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                      <% } %>
                      <% if (currentPage < totalPages - 2) { %>
                        <% if (currentPage < totalPages - 3) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                          </li>
                        <% } %>
                        <li class="page-item">
                          <a class="page-link" href="?page=<%= totalPages %>"><%= totalPages %></a>
                        </li>
                      <% } %>
                    </ul>
                  </nav>
                <% } %>
              <% } else { %>
                <div class="no-transactions">
                  <i class="fas fa-wallet fa-3x text-muted mb-3"></i>
                  <h5 class="text-muted">No Transactions Found</h5>
                  <p class="text-muted">Start by adding money to your wallet</p>
                  <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                    <i class="fas fa-plus"></i> Add Money
                  </button>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/user/sidebarFooter') %>
</div>

<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="addMoneyForm">
        <div class="modal-body">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount (â‚¹)</label>
            <input type="number" class="form-control" id="amount" name="amount" min="1" max="50000" step="0.01" >
            <div class="form-text">Minimum: â‚¹1, Maximum: â‚¹50,000</div>
            <p class="error-text" id="add-amount-error"></p>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description (Optional)</label>
            <input type="text" class="form-control" id="description" name="description" placeholder="e.g., Adding funds for shopping">
          </div>
          <div class="mb-3">
            <div class="d-flex flex-wrap gap-2">
              <button type="button" class="btn btn-outline-primary quick-amount" data-amount="100">â‚¹100</button>
              <button type="button" class="btn btn-outline-primary quick-amount" data-amount="500">â‚¹500</button>
              <button type="button" class="btn btn-outline-primary quick-amount" data-amount="1000">â‚¹1000</button>
              <button type="button" class="btn btn-outline-primary quick-amount" data-amount="2000">â‚¹2000</button>
              <button type="button" class="btn btn-outline-primary quick-amount" data-amount="5000">â‚¹5000</button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary" id="addMoneySubmit">Add Money</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="withdrawMoneyModal" tabindex="-1" aria-labelledby="withdrawMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="withdrawMoneyModalLabel">Withdraw Money</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="withdrawMoneyForm">
        <div class="modal-body">
          <div class="mb-3">
            <label for="withdrawAmount" class="form-label">Amount (â‚¹)</label>
            <input type="number" class="form-control" id="withdrawAmount" name="amount" min="1" max="<%= wallet ? wallet.balance : 0 %>" step="0.01" >
            <div class="form-text">Minimum: â‚¹1, Maximum: â‚¹<%= wallet ? wallet.balance.toFixed(2) : '0.00' %></div>
            <p class="error-text" id="withdraw-amount-error"></p>
          </div>
          <div class="mb-3">
            <label for="withdrawDescription" class="form-label">Description (Optional)</label>
            <input type="text" class="form-control" id="withdrawDescription" name="description" placeholder="e.g., Withdraw to bank">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Withdraw</button>
        </div>
      </form>
    </div>
  </div>
</div>

// Add this to your HTML head:
// <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    
    // Quick amount buttons
    document.querySelectorAll('.quick-amount').forEach(button => {
      button.addEventListener('click', function () {
        const amount = this.getAttribute('data-amount');
        document.getElementById('amount').value = amount;
        document.getElementById('add-amount-error').textContent = '';
      });
    });

    // Add money form with Razorpay
    document.getElementById('addMoneyForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const submitBtn = this.querySelector('#addMoneySubmit');
      const errorText = document.getElementById('add-amount-error');
      errorText.textContent = '';

      const formData = new FormData(this);
      const amount = parseFloat(formData.get('amount'));
      const description = formData.get('description');

      // Validation
      if (!amount || isNaN(amount) || amount <= 0) {
        errorText.textContent = 'Please enter a valid amount';
        return;
      }
      if (amount > 50000) {
        errorText.textContent = 'Maximum amount limit is â‚¹50,000';
        return;
      }

      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';

      try {
        // Call add money API to get Razorpay order details
        const response = await fetch('/wallet/add-money', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount, description }),
        });
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to initiate payment');
        }

        // Initialize Razorpay checkout
        const options = {
          key: result.key,
          amount: result.amount,
          currency: result.currency,
          name: 'Lune Perfume',
          description: 'Add Money to Wallet',
          order_id: result.orderId,
          handler: async function (paymentResponse) {
            // Payment successful, verify and add money
            try {
              const verifyResponse = await fetch('/wallet/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  razorpay_payment_id: paymentResponse.razorpay_payment_id,
                  razorpay_order_id: paymentResponse.razorpay_order_id,
                  razorpay_signature: paymentResponse.razorpay_signature,
                  amount: amount,
                  description: description
                }),
              });
              const verifyResult = await verifyResponse.json();

              if (verifyResponse.ok) {
                document.getElementById('wallet-balance').textContent = verifyResult.newBalance.toFixed(2);
                Swal.fire({
                  title: 'Success!',
                  text: verifyResult.message,
                  icon: 'success',
                  timer: 2000,
                  timerProgressBar: true,
                  toast: true,
                  position: 'top-end',
                  showConfirmButton: false,
                });
                bootstrap.Modal.getInstance(document.getElementById('addMoneyModal')).hide();
                document.getElementById('addMoneyForm').reset();
                setTimeout(() => window.location.reload(), 1500);
              } else {
                throw new Error(verifyResult.message || 'Payment verification failed');
              }
            } catch (error) {
              console.error('Verification error:', error);
              Swal.fire({
                title: 'Error!',
                text: 'Payment verification failed. Please contact support.',
                icon: 'error',
                toast: true,
                position: 'top-end',
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false,
              });
            }
          },
          prefill: {
            name: '<%= user.name || "" %>',
            email: '<%= user.email || "" %>',
            contact: '<%= user.phone || "" %>'
          },
          theme: {
            color: '#3399cc'
          },
          modal: {
            ondismiss: function() {
              console.log('Payment cancelled by user');
              submitBtn.disabled = false;
              submitBtn.innerHTML = 'Add Money';
            }
          }
        };

        const razorpay = new Razorpay(options);
        razorpay.open();

      } catch (error) {
        console.error('Payment error:', error);
        errorText.textContent = error.message || 'Unable to process payment. Please try again.';
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Add Money';
      }
    });

    // Withdraw money form (unchanged)
    document.getElementById('withdrawMoneyForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const submitBtn = this.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
      const errorText = document.getElementById('withdraw-amount-error');
      errorText.textContent = '';

      const formData = new FormData(this);
      const data = Object.fromEntries(formData);
      data.amount = parseFloat(data.amount);

      const maxBalance = parseFloat('<%= wallet ? wallet.balance : 0 %>');
      if (!data.amount || isNaN(data.amount) || data.amount <= 0) {
        errorText.textContent = 'Please enter a valid amount';
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Withdraw';
        return;
      }
      if (data.amount > maxBalance) {
        errorText.textContent = `Amount cannot exceed available balance (â‚¹${maxBalance.toFixed(2)})`;
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Withdraw';
        return;
      }

      try {
        const response = await fetch('/wallet/deduct', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        const result = await response.json();

        if (response.ok) {
          document.getElementById('wallet-balance').textContent = result.newBalance.toFixed(2);
          Swal.fire({
            title: 'Success',
            text: result.message || 'Money withdrawn successfully!',
            icon: 'success',
            timer: 2000,
            timerProgressBar: true,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
          });
          bootstrap.Modal.getInstance(document.getElementById('withdrawMoneyModal')).hide();
          this.reset();
          setTimeout(() => window.location.reload(), 1000);
        } else {
          errorText.textContent = result.message || 'Failed to withdraw money. Please try again.';
        }
      } catch (error) {
        console.error('Withdraw money error:', error);
        errorText.textContent = 'Unable to connect to the server. Please try again.';
        Swal.fire({
          title: 'Error',
          text: 'Unable to connect to the server.',
          icon: 'error',
          timer: 2000,
          timerProgressBar: true,
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
        });
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Withdraw';
      }
    });
  });
</script>