<%- include('../partials/user/header') %>

<!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<style>
/* Enhanced Cart Page CSS - Perfume Store Theme */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background-color: #f8f8f8;
  color: #2c2c2c;
  line-height: 1.6;
  font-weight: 300;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 15px;
}

/* Page title */
h2.mb-4 {
  font-weight: 200;
  font-size: 2.5rem;
  color: #1a1a1a;
  text-align: center;
  margin: 2rem 0 3rem;
  letter-spacing: 1px;
  text-transform: uppercase;
}

/* Loading overlay */
#loadingOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

#loadingOverlay.show {
  opacity: 1;
  visibility: visible;
}

.spinner-border {
  width: 3rem;
  height: 3rem;
  color: #6c757d;
}

/* Cart items grid layout */
#cartItems {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  margin-bottom: 2rem;
}

/* Responsive grid columns */
@media (min-width: 50px) {
  #cartItems {
    grid-template-columns: repeat(2, 1fr);
    gap: 25px;
  }
}

@media (min-width: 1200px) {
  #cartItems {
    grid-template-columns: repeat(5, 1fr);
    gap: 30px;
  }
}

/* Cart item card styling */
.cart-item {
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 10px;
  padding: 15px;
  display: flex;
  flex-direction: column;
  position: relative;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.cart-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

/* Remove button */
.cart-item .btn-danger {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  background: #343a40; /* Dark background */
  color: #ffffff; /* White text */
  border: none;
}

.cart-item .btn-danger:hover {
  background: #23272b; /* Slightly darker for hover */
}

/* Product image */
.cart-item img {
  width: 100%;
  height: 180px;
  object-fit: cover;
  border-radius: 8px 8px 0 0;
  margin-bottom: 15px;
}

/* Product details */
.cart-item h5 {
  font-size: 1rem;
  font-weight: 400;
  color: #1a1a1a;
  margin-bottom: 10px;
  line-height: 1.4;
  min-height: 2.8rem;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.price-display {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-bottom: 10px;
}

.current-price {
  font-size: 1.1rem;
  font-weight: 600;
  color: #1a1a1a;
}

.original-price {
  font-size: 0.9rem;
  color: #999;
  text-decoration: line-through;
}

.savings-amount {
  font-size: 0.85rem;
  color: #28a745;
  font-weight: 500;
}

/* Quantity controls */
.quantity-section {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin: 10px 0;
}

.quantity-btn {
  width: 34px;
  height: 34px;
  border: none; /* Remove border */
  background: #ffffff; /* White background */
  color: #343a40; /* Dark text for contrast */
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  transition: all 0.2s ease;
}

.quantity-btn:hover {
  background: #e9ecef; /* Slightly darker white/gray for hover */
  color: #23272b;
}

.quantity-input {
  width: 60px;
  height: 34px;
  text-align: center;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 0.95rem;
}

/* Item total */
.item-total-section {
  text-align: center;
  margin-top: 10px;
}

.item-total {
  font-size: 1.15rem;
  font-weight: 600;
  color: #1a1a1a;
}

.item-savings {
  font-size: 0.85rem;
  color: #28a745;
  font-weight: 500;
}

/* Empty cart */
#cartItems p {
  grid-column: 1 / -1;
  text-align: center;
  font-size: 1.25rem;
  color: #666;
  margin: 3rem 0;
}

/* Cart summary */
.card.p-3 {
  background: #ffffff;
  border: 1px solid #e8e8e8;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
  padding: 2rem;
  margin-top: 2rem;
}

.card h4 {
  font-weight: 300;
  font-size: 1.8rem;
  color: #1a1a1a;
  text-align: center;
  margin-bottom: 1.5rem;
}

.card .d-flex {
  justify-content: space-between;
  margin-bottom: 0.8rem;
  font-size: 1rem;
}

.card .d-flex span:first-child {
  color: #666;
  font-weight: 300;
}

.card .d-flex span:last-child {
  color: #1a1a1a;
  font-weight: 500;
}

.savings-highlight {
  background: #e8f5e8;
  padding: 0.8rem;
  border-radius: 6px;
  margin: 1rem 0;
  border-left: 4px solid #28a745;
}

.savings-highlight span:last-child {
  color: #28a745;
  font-weight: 600;
}

.card hr {
  margin: 1.5rem 0;
  border-color: #e8e8e8;
}

.card .fs-5.fw-bold {
  font-size: 1.4rem;
  margin-top: 1rem;
}

/* Buttons */
.btn {
  border-radius: 6px;
  font-weight: 400;
  padding: 12px 24px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.btn-outline-danger {
  background: #343a40; /* Dark background */
  color: #ffffff; /* White text */
  border: none;
}

.btn-outline-danger:hover {
  background: #23272b; /* Slightly darker for hover */
}

.btn-primary {
  background: #0dcaf0; /* Glow background */
  color: #ffffff; /* White text */
  border: none;
}

.btn-primary:hover {
  background: #0aa8c5; /* Slightly darker glow for hover */
}

.empty-cart .btn {
  background: #343a40; /* Dark background */
  color: #ffffff; /* White text */
  border: none;
}

.empty-cart .btn:hover {
  background: #23272b; /* Slightly darker for hover */
}

/* Fade out animation */
.fade-out {
  opacity: 0;
  transform: scale(0.95);
  transition: all 0.3s ease;
}

/* Responsive adjustments */
@media (max-width: 767px) {
  h2.mb-4 {
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .cart-item img {
    height: 160px;
  }

  .cart-item h5 {
    font-size: 0.95rem;
  }

  .card.p-3 {
    padding: 1.5rem;
  }
}

@media (max-width: 576px) {
  .container {
    padding: 0 10px;
  }

  .cart-item img {
    height: 200px;
  }
}

/* Messages */
.success-message, .error-message {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 1rem 1.5rem;
  border-radius: 6px;
  color: white;
  font-weight: 500;
  z-index: 10000;
  transform: translateX(100%);
  transition: transform 0.3s ease;
}

.success-message {
  background: #28a745;
}

.error-message {
  background: #dc3545;
}

.success-message.show, .error-message.show {
  transform: translateX(0);
}

.success-message:nth-child(n+2), .error-message:nth-child(n+2) {
  top: calc(20px + (n - 1) * 50px); /* Stack messages vertically */
}

.empty-cart {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  padding: 4rem 2rem;
  color: #6c757d;
  font-family: 'Helvetica Neue', sans-serif;
  font-weight: 300;
}

.empty-cart i {
  font-size: 3rem;
  margin-bottom: 1rem;
  color: #adb5bd;
}

.empty-cart p {
  margin-bottom: 1rem;
  font-size: 16px;
}
</style>

<!-- Loading Overlay -->
<div id="loadingOverlay">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

<div class="container my-4">
  <h2 class="mb-4">Your Shopping Cart</h2>

  <!-- Cart Items List -->
  <div id="cartItems">
    <% if (cartItems && cartItems.length > 0) { %>
      <% cartItems.forEach(item => { %>
        <div class="card cart-item" data-item-id="<%= item.id %>" 
             data-offer-price="<%= item.offerPrice %>"
             data-original-price="<%= item.originalPrice %>">
          <a href="/product-show/<%= item.productId %>">
            <img src="<%= item.imageUrl %>" class="img-fluid rounded" alt="<%= item.name %>">
          </a>
          <div class="cart-item-content">
            <h5><%= item.name %></h5>
            <div class="price-display">
              <div class="current-price">₹<%= item.offerPrice.toLocaleString() %> each</div>
              <% if (item.hasDiscount) { %>
                <div class="original-price">₹<%= item.originalPrice.toLocaleString() %></div>
                <div class="savings-amount">Save ₹<%= (item.originalPrice - item.offerPrice).toLocaleString() %> per item</div>
              <% } %>
            </div>
            <div class="quantity-section">
              <button class="btn btn-outline-secondary quantity-btn" 
                      onclick="changeQuantity('<%= item.id %>', -1)">−</button>
              <input type="number" class="form-control quantity-input" min="1" 
                     max="<%= item.maxStock %>" value="<%= item.quantity %>" 
                     onchange="inputQuantityChange('<%= item.id %>', this.value)" />
              <button class="btn btn-outline-secondary quantity-btn" 
                      onclick="changeQuantity('<%= item.id %>', 1)">＋</button>
            </div>
            <div class="item-total-section">
              <strong class="item-total">₹<%= item.itemTotal.toLocaleString() %></strong>
              <% if (item.hasDiscount) { %>
                <div class="item-savings">You save ₹<%= item.itemSavings.toLocaleString() %></div>
              <% } %>
            </div>
            <button class="btn btn-danger btn-sm" onclick="removeItem('<%= item.id %>')" 
                    title="Remove item">×</button>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <div class="empty-cart" id="emptyCart">
        <i class="bi bi-cart"></i>
        <p>No items in your Cart yet.</p>
        <a href="/products" class="btn">Browse Products</a>
      </div>
    <% } %>
  </div>

  <% if (cartItems && cartItems.length > 0) { %>
    <!-- Cart Summary -->
    <div class="card p-3">
      <h4>Order Summary</h4>
      <div class="d-flex justify-content-between">
        <span>Subtotal:</span>
        <span id="subtotal">₹<%= summary.subtotal.toLocaleString() %></span>
      </div>
      <% if (summary.totalSavings > 0) { %>
        <div class="savings-highlight">
          <div class="d-flex justify-content-between">
            <span>🎉 Your Total Savings:</span>
            <span id="totalSavings">-₹<%= summary.totalSavings.toLocaleString() %></span>
          </div>
        </div>
      <% } %>
      <div class="d-flex justify-content-between">
        <span>Shipping:</span>
        <span id="shipping"><%= summary.shipping === 0 ? 'Free' : '₹' + summary.shipping.toLocaleString() %></span>
      </div>
      <hr>
      <div class="d-flex justify-content-between fs-5 fw-bold">
        <span>Final Total:</span>
        <span id="total">₹<%= summary.total.toLocaleString() %></span>
      </div>
      <div class="mt-3 d-flex justify-content-between">
        <button class="btn btn-outline-danger" onclick="clearCart()">Clear Cart</button>
        <button class="btn btn-primary" onclick="proceedToCheckout()">Proceed to Checkout</button>
      </div>
    </div>
  <% } %>
</div>

<!-- Bootstrap 5 JS (with Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script>
// Utility functions
const showLoading = () => document.getElementById('loadingOverlay')?.classList.add('show');
const hideLoading = () => document.getElementById('loadingOverlay')?.classList.remove('show');

function showMessage(message, isSuccess = true) {
  const messageDiv = document.createElement('div');
  messageDiv.className = isSuccess ? 'success-message' : 'error-message';
  messageDiv.textContent = message;
  document.body.appendChild(messageDiv);
  
  setTimeout(() => messageDiv.classList.add('show'), 100);
  setTimeout(() => {
    messageDiv.classList.remove('show');
    setTimeout(() => messageDiv.remove(), 300);
  }, 2000); // Display for 2 seconds
}

function updateCartSummary() {
  let subtotal = 0;
  let totalSavings = 0;

  document.querySelectorAll('.cart-item').forEach(item => {
    const qty = parseInt(item.querySelector('.quantity-input').value);
    const offerPrice = parseFloat(item.dataset.offerPrice);
    const originalPrice = parseFloat(item.dataset.originalPrice);
    subtotal += qty * offerPrice;
    totalSavings += qty * (originalPrice - offerPrice);
  });

  const shipping = subtotal > 5000 ? 0 : 100;
  const total = subtotal + shipping;

  const subtotalEl = document.getElementById('subtotal');
  const shippingEl = document.getElementById('shipping');
  const totalEl = document.getElementById('total');
  const savingsElement = document.querySelector('.savings-highlight');

  if (subtotalEl) subtotalEl.textContent = `₹${subtotal.toLocaleString()}`;
  if (shippingEl) shippingEl.textContent = shipping === 0 ? 'Free' : `₹${shipping.toLocaleString()}`;
  if (totalEl) totalEl.textContent = `₹${total.toLocaleString()}`;

  if (savingsElement) {
    savingsElement.style.display = totalSavings > 0 ? 'block' : 'none';
    savingsElement.querySelector('span:last-child').textContent = `-₹${totalSavings.toLocaleString()}`;
  }

  // Remove originalSubtotal as it's not provided by the controller
  const originalSubtotalEl = document.getElementById('originalSubtotal');
  if (originalSubtotalEl) originalSubtotalEl.parentElement.style.display = 'none';
}

// Change quantity via buttons (+/-)
function changeQuantity(itemId, delta) {
  const item = document.querySelector(`[data-item-id="${itemId}"]`);
  if (!item) return;

  const input = item.querySelector('.quantity-input');
  let newQty = parseInt(input.value) + delta;

  if (newQty < 1) {
    removeItem(itemId);
    return;
  }
  if (newQty > parseInt(input.max)) {
    showMessage('Quantity exceeds available stock', false);
    return;
  }
  updateQuantity(itemId, newQty);
}

// Change quantity via input box
function inputQuantityChange(itemId, value) {
  let qty = parseInt(value);
  if (isNaN(qty) || qty < 1) qty = 1;

  const item = document.querySelector(`[data-item-id="${itemId}"]`);
  if (!item) return;

  if (qty > parseInt(item.querySelector('.quantity-input').max)) {
    showMessage('Quantity exceeds available stock', false);
    qty = parseInt(item.querySelector('.quantity-input').max);
  }
  updateQuantity(itemId, qty);
}

// Update quantity in backend and update UI
async function updateQuantity(itemId, quantity) {
  showLoading();
  try {
    const response = await fetch('/cart/update-quantity', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
      },
      body: JSON.stringify({ itemId, quantity })
    });

    const data = await response.json();

    if (data.success) {
      const item = document.querySelector(`[data-item-id="${itemId}"]`);
      item.querySelector('.quantity-input').value = quantity;
      item.querySelector('.item-total').textContent = `₹${data.itemTotal.toLocaleString()}`;
      if (data.itemSavings > 0) {
        item.querySelector('.item-savings').textContent = `You save ₹${data.itemSavings.toLocaleString()}`;
      }
      updateCartSummary();
      showMessage('Quantity updated successfully');
    } else {
      showMessage(data.message || 'Failed to update quantity', false);
    }
  } catch (error) {
    console.error('Update quantity error:', error);
    showMessage('Error updating quantity', false);
  } finally {
    hideLoading();
  }
}

// Remove item from cart
async function removeItem(itemId) {
  console.log('🟡 Starting removeItem for itemId:', itemId);
  showLoading();

  try {
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
    console.log('🟢 CSRF Token:', csrfToken);

    const response = await fetch(`/cart/remove/${itemId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'CSRF-Token': csrfToken
      }
    });

    console.log('🔵 Response status:', response.status);
    
    const data = await response.json();
    console.log('🟢 Response data:', data);

    if (data.success) {
      const item = document.querySelector(`[data-item-id="${itemId}"]`);
      console.log('🟢 Item element found in DOM:', item);

      if (item) {
        item.classList.add('fade-out');
        setTimeout(() => {
          console.log('🧹 Removing item from DOM...');
          item.remove();

          console.log('🔄 Updating cart summary...');
          updateCartSummary();

          showMessage('Item removed from cart');
          
          if (data.remainingItems === 0) {
            console.log('🟡 Cart is now empty. Updating UI...');
            document.getElementById('cartItems').innerHTML = '<p>Your cart is empty.</p>';
            const summaryCard = document.querySelector('.card.p-3');
            if (summaryCard) {
              summaryCard.remove();
              console.log('🧹 Removed summary card.');
            }
          }
        }, 300);
      } else {
        console.warn('⚠️ Item not found in DOM for itemId:', itemId);
      }

    } else {
      console.error('❌ Server error message:', data.message);
      showMessage(data.message || 'Failed to remove item', false);
    }

  } catch (error) {
    console.error('❌ Exception in removeItem:', error);
    showMessage('Error removing item', false);
  } finally {
    hideLoading();
    console.log('✅ Finished removeItem process.');
  }
}

// Clear entire cart
async function clearCart() {
  const confirm = await Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to clear your entire cart?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, clear it',
    cancelButtonText: 'Cancel'
  });

  if (!confirm.isConfirmed) return;

  showLoading();

  try {
    const response = await fetch('/cart/clear', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
      }
    });

    const data = await response.json();

    if (data.success) {
            location.reload();

      showMessage('Cart cleared successfully');
    } else {
      showMessage(data.message || 'Failed to clear cart', false);
    }
  } catch (error) {
    showMessage('Error clearing cart', false);
  } finally {
    hideLoading();
  }
}


// Proceed to checkout
function proceedToCheckout() {
  window.location.href = '/checkout';
}

// On page load, update summary
document.addEventListener('DOMContentLoaded', () => {
  updateCartSummary();
});
</script>
