<%- include('../partials/user/header') %>
<div class="content-placeholder">
    <div class="container-fluid">
        <div class="row">
            <!-- Form Side -->
            <div class="col-md-6">
                <div class="form-container">
                    <h1 class="mb-4">Verify OTP</h1>
                    <form id="forgotPasswordOtpForm">
                        <p id="topError" class="error-top"></p>
                        
                        <div class="mb-3">
                            <label class="form-label">Enter 6-digit OTP sent to your email:</label>
                            <div class="otp-container">
                                <input type="text" class="otp-input" maxlength="1" autofocus>
                                <input type="text" class="otp-input" maxlength="1">
                                <input type="text" class="otp-input" maxlength="1">
                                <input type="text" class="otp-input" maxlength="1">
                                <input type="text" class="otp-input" maxlength="1">
                                <input type="text" class="otp-input" maxlength="1">
                                <input type="hidden" id="otpInput" name="otp">
                                <input type="hidden" id="userEmail" name="email" value="<%= email || '' %>">
                            </div>
                        </div>
                        
                        <button type="submit" class="my-otp-btn mt-4">Verify</button>
                        
                        <div class="resend-container mt-4">
                            <span class="countdown-text">Resend code in <span id="countdown">60s</span></span>
                            <button type="button" id="resendBtn" class="btn btn-link" disabled>Resend OTP</button>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Image Side -->
            <div class="col-md-6 image-side d-none d-md-block">
                <!-- Image will be displayed via CSS -->
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
        font-family: Arial, sans-serif;
        background-color: var(--white);
        color: var(--dark-grey);
    }

    * {
        box-sizing: border-box;
    }

    :root {
        --dark-brown: #473d47;
        --pink: #53412e;
        --lavender: #5b4e43;
        --champagne: #DCCCB2;
        --amber: #D4A76A;
        --dark-grey: #2A2A2A;
        --medium-grey: #666666;
        --light-grey: #fdf9f5;
        --white: #fcf9fb;
    }

    .content-placeholder {
        padding: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding-top: 80px;
        box-sizing: border-box;
    }

    .container-fluid, .row {
        height: 100%;
        padding: 0;
        margin: 0;
    }
    
    .row {
        display: flex;
    }

    .form-container {
        background-color: var(--white);
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        padding: 20px;
    }

    h1 {
        color: var(--dark-brown);
        font-weight: 600;
        margin-bottom: 25px;
    }

    .form-label {
        color: var(--dark-brown);
        font-weight: 500;
    }

    .otp-container {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
        gap: 10px;
    }

    .otp-input {
        width: 48px;
        height: 48px;
        border: 1px solid var(--champagne);
        border-radius: 5px;
        text-align: center;
        font-size: 18px;
        font-weight: 600;
        color: var(--dark-brown);
        transition: all 0.3s ease;
    }

    .otp-input:focus {
        border-color: var(--pink);
        box-shadow: 0 0 0 0.2rem rgba(229, 167, 183, 0.25);
        outline: none;
    }

    .my-otp-btn {
        background-color: var(--lavender);
        border: none;
        padding: 10px 20px;
        font-weight: 600;
        width: 100%;
        border-radius: 5px;
        color: white;
    }

    .my-otp-btn:hover {
        background-color: var(--dark-brown);
    }

    .resend-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px;
    }

    .countdown-text {
        color: var(--medium-grey);
        font-size: 14px;
    }

    #countdown {
        font-weight: 600;
    }

    .btn-link {
        color: var(--pink);
        text-decoration: none;
        padding: 0;
        font-weight: 500;
        background: none;
        border: none;
    }

    .btn-link:hover:not(:disabled) {
        color: var(--dark-brown);
        text-decoration: underline;
    }

    .btn-link:disabled {
        color: var(--medium-grey);
        opacity: 0.6;
        cursor: not-allowed;
    }

    .error-top {
        color: #dc3545;
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    @media (min-width: 768px) {
        body {
            overflow-x: hidden;
        }

        .col-md-6 {
            height: 100%;
            padding: 0;
        }
        
        .form-container {
            padding: 40px;
            width: 100%;
            max-width: none;
        }
        
        .image-side {
            background-image: url('/images/pg9.jpg');
            background-size: cover;
            background-position: center;
            height: 100%;
        }
    }

    @media (max-width: 767px) {
        .form-container {
            padding: 20px;
        }
        
        .otp-input {
            width: 40px;
            height: 40px;
            font-size: 16px;
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('forgotPasswordOtpForm');
    const topError = document.getElementById('topError');
    const otpInput = document.getElementById('otpInput');
    const userEmail = document.getElementById('userEmail');
    const resendBtn = document.getElementById('resendBtn');
    const countdownSpan = document.getElementById('countdown');
    const otpInputs = document.querySelectorAll('.otp-input');

    // Get server-provided OTP timestamps
    const otpCreatedAt = <%= typeof otpCreatedAt !== 'undefined' ? otpCreatedAt : 'Date.now()' %>;
    const expiresAt = <%= typeof expiresAt !== 'undefined' ? expiresAt : '(Date.now() + 60000)' %>;

    console.log('Initial - otpCreatedAt:', otpCreatedAt, 'expiresAt:', expiresAt);

    // OTP Input Handling
    otpInputs.forEach((input, index) => {
        input.addEventListener('input', (e) => {
            const value = e.target.value;
            console.log(`Input at index ${index}: ${value}`);
            if (value.length === 1 && /^\d$/.test(value)) {
                updateOtpValue();
                if (index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                } else {
                    input.blur();
                }
            } else {
                e.target.value = '';
                updateOtpValue();
                topError.textContent = 'Please enter a single digit';
            }
        });

        input.addEventListener('keydown', (e) => {
            if (e.key === 'Backspace' && !e.target.value && index > 0) {
                otpInputs[index - 1].focus();
            }
        });

        input.addEventListener('paste', (e) => {
            e.preventDefault();
            const pasteData = e.clipboardData.getData('text').trim();
            console.log(`Pasted data: ${pasteData}`);
            if (/^\d{1,6}$/.test(pasteData)) {
                for (let i = 0; i < pasteData.length && i < otpInputs.length; i++) {
                    otpInputs[i].value = pasteData[i];
                }
                const nextIndex = Math.min(pasteData.length, otpInputs.length - 1);
                otpInputs[nextIndex].focus();
                updateOtpValue();
            } else {
                topError.textContent = 'Please paste a valid 1-6 digit OTP';
            }
        });
    });

    function updateOtpValue() {
        const otpValue = Array.from(otpInputs).map(input => input.value).join('');
        otpInput.value = otpValue;
        console.log(`Updated OTP: ${otpValue}`);
    }

    let timerInterval;
    function startTimer(newCreationTime = null, newExpiresAt = null) {
        let timeLeft = newExpiresAt 
            ? Math.max(0, Math.floor((newExpiresAt - Date.now()) / 1000))
            : Math.max(0, Math.floor((expiresAt - Date.now()) / 1000));
        
        console.log('Timer start - timeLeft:', timeLeft, 'seconds');

        resendBtn.disabled = true;
        countdownSpan.textContent = `${timeLeft}s`;
        topError.textContent = '';

        if (timeLeft <= 0) {
            countdownSpan.textContent = '0s';
            topError.textContent = 'OTP has expired. Please resend.';
            resendBtn.disabled = false;
            return;
        }

        if (timerInterval) clearInterval(timerInterval);

        timerInterval = setInterval(() => {
            timeLeft--;
            countdownSpan.textContent = `${timeLeft}s`;
            console.log(`Timer tick: ${timeLeft}s`);

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                countdownSpan.textContent = '0s';
                topError.textContent = 'OTP has expired. Please resend.';
                resendBtn.disabled = false;
            }
        }, 1000);
    }

    // Start timer
    startTimer();

    form.addEventListener('input', () => {
        if (!topError.textContent.includes('expired')) {
            topError.textContent = '';
        }
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (otpInput.value.length !== 6) {
            topError.textContent = 'Please enter a complete 6-digit OTP';
            return;
        }

        if (Date.now() > expiresAt) {
            topError.textContent = 'OTP has expired. Please resend.';
            return;
        }

        const otp = otpInput.value;
        const email = userEmail.value;
        console.log(`Submitting OTP: ${otp}, Email: ${email}`);

        try {
            const res = await fetch('/verify-forgot-password-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otp, email })
            });

            if (!res.ok) {
                const data = await res.json();
                topError.textContent = data.error || 'Invalid OTP';
                return;
            }

            const data = await res.json();
            topError.style.color = 'green';
            topError.textContent = 'OTP verified successfully!';
            setTimeout(() => {
                window.location.href = data.redirect || '/reset-password';
            }, 1500);
        } catch (err) {
            topError.textContent = 'Error verifying OTP: ' + err.message;
            console.error('Submission error:', err);
        }
    });

    resendBtn.addEventListener('click', async () => {
        resendBtn.disabled = true;
        topError.textContent = 'Resending OTP...';
        console.log('Resending OTP');

        try {
            const email = userEmail.value;
            if (!email) {
                topError.textContent = 'Email not found. Please try again.';
                resendBtn.disabled = false;
                return;
            }

            const res = await fetch('/resend-forgot-password-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            });

            if (!res.ok) {
                const data = await res.json();
                topError.textContent = data.error || 'Failed to resend OTP';
                resendBtn.disabled = false;
                return;
            }

            const data = await res.json();
            const newCreationTime = data.otpCreatedAt || Date.now();
            const newExpiresAt = data.expiresAt || (newCreationTime + 60000);

            otpInputs.forEach(input => input.value = '');
            otpInput.value = '';
            otpInputs[0].focus();

            topError.style.color = 'green';
            topError.textContent = 'OTP resent successfully. Please check your email.';
            startTimer(newCreationTime, newExpiresAt);
        } catch (err) {
            topError.textContent = 'Error resending OTP: ' + err.message;
            console.error('Resend error:', err);
            resendBtn.disabled = false;
        }
    });
});
</script>
<%- include('../partials/user/footer') %>