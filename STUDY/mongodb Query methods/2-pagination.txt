const page = parseInt(req.query.page) || 1;
const limit = 10;
const skip = (page - 1) * limit;

const products = await Product.find().skip(skip).limit(limit);


// GET /products?page=1&limit=10
const getPaginatedProducts = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;       // default page 1
    const limit = parseInt(req.query.limit) || 10;    // default limit 10
    const skip = (page - 1) * limit;

    const products = await Product.find()
      .sort({ createdAt: -1 }) // ✅ Latest first
      .skip(skip)
      .limit(limit);

    const total = await Product.countDocuments();

    res.status(200).json({
      success: true,
      page,
      totalPages: Math.ceil(total / limit),
      products,
    });

  } catch (err) {
    res.status(500).json({ success: false, message: 'Server error', error: err.message });
  }
};

const productSchema = new mongoose.Schema({
  name: String,
  price: Number,
}, { timestamps: true }); // ✅ Adds createdAt and updatedAt

