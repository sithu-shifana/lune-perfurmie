const filter = {};
if (req.query.name) {
  filter.name = { $regex: req.query.name, $options: 'i' };
}
const result = await Product.find(filter);


const getFilteredProducts = async (req, res) => {
  try {
    const {
      category,
      minPrice,
      maxPrice,
      sort,
      page = 1,
      limit = 10,
    } = req.query;

    const query = {};

    // ðŸ”¹ Category Filter
    if (category) {
      query.category = category;
    }

    // ðŸ”¹ Price Filter
    if (minPrice || maxPrice) {
      query.price = {};
      if (minPrice) query.price.$gte = parseFloat(minPrice);
      if (maxPrice) query.price.$lte = parseFloat(maxPrice);
    }

    // ðŸ”¹ Sorting
    let sortOption = {};
    if (sort === 'name_asc') sortOption.name = 1;
    else if (sort === 'name_desc') sortOption.name = -1;
    else if (sort === 'latest') sortOption.createdAt = -1;
    else if (sort === 'price_low_high') sortOption.price = 1;
    else if (sort === 'price_high_low') sortOption.price = -1;

    const skip = (parseInt(page) - 1) * parseInt(limit);

    // ðŸ”¹ Final Query
    const products = await Product.find(query)
      .sort(sortOption)
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Product.countDocuments(query);

    res.status(200).json({
      success: true,
      total,
      page: parseInt(page),
      totalPages: Math.ceil(total / parseInt(limit)),
      products,
    });

  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};


let sortOption = {};

if (sort === 'price_low_high') {
  sortOption.price = 1; // ascending
} else if (sort === 'price_high_low') {
  sortOption.price = -1; // descending
}


