| Method                | Description                                 |
| --------------------- | ------------------------------------------- |
| `find()`              | Get **all** documents matching a condition  |
| `findOne()`           | Get **first** document matching a condition |
| `findById()`          | Shortcut for finding by `_id`               |
| `updateOne()`         | Update a single matching document           |
| `updateMany()`        | Update multiple documents                   |
| `findOneAndUpdate()`  | Find a document and update it in one step   |
| `findByIdAndUpdate()` | Same as above, but with `_id`               |
| `deleteOne()`         | Delete one document                         |
| `deleteMany()`        | Delete many                                 |
| `findOneAndDelete()`  | Find and delete in one step                 |
| `countDocuments()`    | Count number of matching docs               |
| `aggregate()`         | Use MongoDB aggregation pipeline            |
| `distinct()`          | Get unique values of a field                |


🔍 FIND QUERIES
User.find({});
User.find({age:{$gt:18}});
User.find({ name: /john/i });
User.find({ role: 'admin' }).limit(5);
User.find({ active: true }).sort({ age: -1 });
User.find().skip(10);
User.find().select('name email');
User.find({ email: { $exists: true } });
User.find({ name: { $in: ['Alice', 'Bob'] } });
User.find({ age: { $gte: 18, $lte: 30 } });


🔍 FindOne Queries
User.findOne({ email: 'test@example.com' });
User.findOne({ name: 'Alice' });
User.findOne({ role: 'user' });
User.findOne({ verified: false });
User.findOne({ age: { $lt: 25 } });
User.findOne({ name: /john/i });
User.findOne({ active: true }).select('name');
User.findOne({}).sort({ age: 1 });
User.findOne({}).populate('profile');
User.findOne({ createdAt: { $gte: startDate } });


🛠️ Update Queries
User.updateOne({ email: 'test@example.com' }, { $set: { active: true } });
User.updateMany({ role: 'user' }, { $inc: { loginCount: 1 } });
User.findOneAndUpdate({ name: 'Alice' }, { age: 30 });
User.findByIdAndUpdate(id, { name: 'Updated' });
User.updateOne({ _id: id }, { $unset: { address: 1 } });
User.updateMany({}, { $set: { updatedAt: Date.now() } });
User.findOneAndUpdate({ email }, { $push: { logins: Date.now() } });
User.updateOne({ email }, { $rename: { oldField: 'newField' } });
User.findByIdAndUpdate(id, { $inc: { age: 1 } });
User.findOneAndUpdate(query, update, { new: true });


❌ Delete Queries
User.deleteOne({ email: 'test@example.com' });
User.deleteMany({ active: false });
User.findOneAndDelete({ name: 'Bob' });
User.findByIdAndDelete(id);
User.deleteOne({ _id: id });
User.deleteMany({ createdAt: { $lt: lastYear } });
User.findOneAndRemove({ email });
User.remove({ role: 'guest' });
User.deleteOne({});
User.deleteMany({});



const getAllProducts = async (req, res) => {
  try {
    const products = await Product.find();
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};



//validation
if (!req.body.name) return res.status(400).json({ message: "Name required" });
